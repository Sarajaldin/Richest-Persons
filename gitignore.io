
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aTOLgsbN69-P"
      },
      "source": [
        "# Intro to Statistics"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yqUB9FTRAxd-"
      },
      "source": [
        "This class, *Intro to Statistics*, builds on probability theory to enable us to quantify our confidence about how distributions of data are related to one another. \n",
        "\n",
        "Through the measured exposition of theory paired with interactive examples, you’ll develop a working understanding of all of the essential statistical tests for assessing whether data are correlated with each other or sampled from different populations -- tests which frequently come in handy for critically evaluating the inputs and outputs of machine learning algorithms. You’ll also learn how to use regression to make predictions about the future based on training data. \n",
        "\n",
        "The content covered in this class builds on the content of other classes in the *Machine Learning Foundations* series (linear algebra, calculus, and probability theory) and is itself foundational for the *Optimization* class. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d4tBvI88BheF"
      },
      "source": [
        "Over the course of studying this topic, you'll: \n",
        "\n",
        "* Develop an understanding of what’s going on beneath the hood of predictive statistical models and machine learning algorithms, including those used for deep learning. \n",
        "* Hypothesize about and critically evaluate the inputs and outputs of machine learning algorithms using essential statistical tools such as the t-test, ANOVA, and R-squared. \n",
        "* Use historical data to predict the future using regression models that take advantage of frequentist statistical theory (for smaller data sets) and modern machine learning theory (for larger data sets), including why we may want to consider applying deep learning to a given problem.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z68nQ0ekCYhF"
      },
      "source": [
        "**Note that this Jupyter notebook is not intended to stand alone. It is the companion code to a lecture or to videos from Jon Krohn's [Machine Learning Foundations](https://github.com/jonkrohn/ML-foundations) series, which offer detail on the following:**\n",
        "\n",
        "*Segment 1: Frequentist Statistics*\n",
        "\n",
        "* Frequentist vs Bayesian Statistics\n",
        "* Review of Relevant Probability Theory\n",
        "* *z*-scores and Outliers\n",
        "* *p*-values\n",
        "* Comparing Means with t-tests\n",
        "* Confidence Intervals\n",
        "* ANOVA: Analysis of Variance\n",
        "* Pearson Correlation Coefficient\n",
        "* R-Squared Coefficient of Determination\n",
        "* Correlation vs Causation\n",
        "* Correcting for Multiple Comparisons \n",
        "\n",
        "*Segment 2: Regression*\n",
        "\n",
        "* Features: Independent vs Dependent Variables\n",
        "* Linear Regression to Predict Continuous Values \n",
        "* Fitting a Line to Points on a Cartesian Plane\n",
        "* Ordinary Least Squares\n",
        "* Logistic Regression to Predict Categories \n",
        "\n",
        "*Segment 3: Bayesian Statistics*\n",
        "\n",
        "* (Deep) ML vs Frequentist Statistics\n",
        "* When to use Bayesian Statistics\n",
        "* Prior Probabilities\n",
        "* Bayes’ Theorem\n",
        "* PyMC3 Notebook\n",
        "* Resources for Further Study of Probability and Statistics"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tctnFC_RJy94"
      },
      "source": [
        "## Segment 1: Frequentist Statistics"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Aq53QtfZJy94"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import scipy.stats as st\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZTBb1QFuJy94"
      },
      "outputs": [],
      "source": [
        "np.random.seed(42)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mWFzBgwKJy95"
      },
      "source": [
        "### Measures of Central Tendency"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2wAeml4zJy95"
      },
      "source": [
        "Measures of central tendency provide a summary statistic on the center of a given distribution, a.k.a., the \"average\" value of the distribution."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4GYvSKu9Jy95"
      },
      "outputs": [],
      "source": [
        "# for left skewed change 1st arg to negative\n",
        "x = st.skewnorm.rvs(-5, size=100000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NfkkNUXcJy95",
        "outputId": "122f3811-87b6-4451-fb2d-b81ecc2b52ef"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-0.28495207,  0.09100441, -0.52225835, -1.6148963 , -0.1653973 ,\n",
              "       -0.23892614, -1.57197969, -1.08124303, -0.73135314, -0.30954794])"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "x[0:10]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "R9rXZm5pJy96",
        "outputId": "4f7ccf2b-cc09-48c6-f3b4-491ebd51a473"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "fig, ax = plt.subplots()\n",
        "_ = plt.hist(x, color = 'lightgreen')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z8wAQUQaJy97"
      },
      "source": [
        "#### Mean"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JVzPrg7AJy97"
      },
      "source": [
        "The most common measure of central tendency, synonomous with the term \"average\", is the **mean**, often symbolized with $\\mu$ (population) or $\\bar{x}$ (sample):"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UoVZlrXkJy97"
      },
      "source": [
        "$$ \\bar{x} = \\frac{\\sum_{i=1}^n x_i}{n} $$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lnHaPyx4Jy97",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "815e61ef-b639-4de9-8469-5c089ca41592"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-0.782953739636977"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "xbar = x.mean()\n",
        "xbar"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7WrybbUKLJfS"
      },
      "outputs": [],
      "source": [
        "# -0.7899339857689391"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "4lSu__LtJy97",
        "outputId": "ef7b0e76-5b3d-4546-ffe0-0951e632b233"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "fig, ax = plt.subplots()\n",
        "plt.axvline(x = x.mean(), color='orange')\n",
        "_ = plt.hist(x, color = 'lightgray')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MN9OBSxfJy98"
      },
      "source": [
        "#### Median"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EwGeNSC5Jy98"
      },
      "source": [
        "The second most common measure of central tendency is the **median**, the midpoint value in the distribution: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uS_asMcbJy98",
        "outputId": "4194c7a4-fb18-4d36-fe40-0b7ecc01b0e6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-0.6761784488947339"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "np.median(x) "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Hr3dHF0NJy98"
      },
      "source": [
        "The **mode** is least impacted by skew, but is typically only applicable to discrete distributions. For continuous distributions with skew (e.g., salary data), median is typically the choice measure of central tendency:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OzX0e9HLJy98",
        "outputId": "7813513b-b39c-4bd1-e5ca-604016acc215"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "fig, ax = plt.subplots()\n",
        "plt.axvline(x = np.mean(x), color='orange')\n",
        "plt.axvline(x = np.median(x), color='green')\n",
        "_ = plt.hist(x, color = 'lightgray')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1m-KJ5kPJy99"
      },
      "source": [
        "### Measures of Dispersion"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PKJQU3eNJy99"
      },
      "source": [
        "#### Variance"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZtkXiVFVJy99"
      },
      "source": [
        "$$ \\sigma^2 = \\frac{\\sum_{i=1}^n (x_i-\\bar{x})^2}{n} $$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FlC38ygXJy99",
        "outputId": "5c4dec5a-a986-47ac-e7be-de53dc37b3e8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.387894242098578"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "x.var()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g07LUlduJy99"
      },
      "source": [
        "#### Standard Deviation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I1VTosKFJy99"
      },
      "source": [
        "A straightforward derivative of variance is **standard deviation** (denoted with $\\sigma$), which is convenient because its units are on the same scale as the values in the distribution: \n",
        "$$ \\sigma = \\sqrt{\\sigma^2} $$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "stPfptc7Jy9-",
        "outputId": "2d682f9e-bd4d-4b18-8e8d-76c5bf27414c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6225471489420953"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "x.var()**(1/2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JLCQyWcjJy9-",
        "outputId": "6f88f36e-5bc5-4d45-a4ec-f6ac7326dea0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6225471489420953"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "sigma = x.std()\n",
        "sigma"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PO_q9fL7Jy9-",
        "outputId": "d87ea970-3759-4bb0-caf1-d40c0cfa82a1"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYMAAAD4CAYAAAAO9oqkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAARWklEQVR4nO3df6zddX3H8efLIszoXKtcO9Y2a6ONS+20alO6uGQIWgpZUlzQFBPpHLMu0kQTkwmSrE4k0RhlYVOSGhrLghbmj9C4uloZi/EPoBetcAsy7vgx2vDjSvnhSgYpvvfH/dQd6729p733ntPe+3wkJ/f7fX8/3+95fyDp635/nHNTVUiSZrdX9LsBSVL/GQaSJMNAkmQYSJIwDCRJwGn9buBEnXnmmbV48eJ+tyH11ZPPPAzA/HlL+tzJUZ5/YPTna9/c3z46nLT/rXrs7rvv/kVVDRxdP2XDYPHixQwODva7Damv/uFfPgjAJ97/jT53cpQfnjP68z3/0c8ufsNJ+9+qx5I8Olbdy0SSJMNAkmQYSJIwDCRJGAaSJAwDSRKGgSQJw0CShGEgSeIU/gSypJPH0NDQb6wvOXQIgIePqk+15cuXT+vxZxPPDCRJhoEkyTCQJGEYSJIwDCRJGAaSJAwDSRKGgSQJw0CShGEgScIwkCRhGEiSMAwkSRgGkiQMA0kShoEkiS7CIMnvJLkryc+S7Evy962+JMmdSYaT3Jzk9FY/o60Pt+2LO451Zas/kOT8jvraVhtOcsXUT1OSdCzdnBm8CJxbVW8DVgBrk6wGvgBcW1VvAp4BLmvjLwOeafVr2ziSLAPWA28B1gJfTTInyRzgK8AFwDLgkjZWktQjE4ZBjfqftvrK9irgXOBbrb4NuKgtr2vrtO3nJUmrb6+qF6vqYWAYWNVew1X1UFW9BGxvYyVJPdLVPYP2G/xe4ClgN/BfwLNVdbgN2Q8saMsLgMcA2vbngNd31o/aZ7z6WH1sTDKYZHBkZKSb1iVJXegqDKrq5apaASxk9Df5P5rWrsbvY0tVrayqlQMDA/1oQZJmpON6mqiqngVuB/4EmJvktLZpIXCgLR8AFgG07b8HPN1ZP2qf8eqSpB7p5mmigSRz2/KrgPcC9zMaChe3YRuAW9vyjrZO2/7vVVWtvr49bbQEWArcBewBlrank05n9CbzjqmYnCSpO6dNPISzgG3tqZ9XALdU1feS3AdsT/I54KfADW38DcA/JxkGDjL6jztVtS/JLcB9wGHg8qp6GSDJJmAXMAfYWlX7pmyGkqQJTRgGVXUP8PYx6g8xev/g6Pr/Au8f51jXANeMUd8J7OyiX0nSNPATyJIkw0CSZBhIkjAMJEkYBpIkDANJEoaBJAnDQJKEYSBJwjCQJGEYSJIwDCRJGAaSJAwDSRKGgSQJw0CShGEgScIwkCRhGEiSMAwkSRgGkiTgtH43IEknamhoqOuxhw4dOu59jmX58uVTcpyTxYRnBkkWJbk9yX1J9iX5eKt/JsmBJHvb68KOfa5MMpzkgSTnd9TXttpwkis66kuS3NnqNyc5faonKkkaXzeXiQ4Dn6yqZcBq4PIky9q2a6tqRXvtBGjb1gNvAdYCX00yJ8kc4CvABcAy4JKO43yhHetNwDPAZVM0P0lSFyYMg6p6vKp+0pZ/CdwPLDjGLuuA7VX1YlU9DAwDq9pruKoeqqqXgO3AuiQBzgW+1fbfBlx0ohOSJB2/47qBnGQx8HbgzlbalOSeJFuTzGu1BcBjHbvtb7Xx6q8Hnq2qw0fVx3r/jUkGkwyOjIwcT+uSpGPoOgySvAb4NvCJqnoeuB54I7ACeBz40rR02KGqtlTVyqpaOTAwMN1vJ0mzRldPEyV5JaNBcFNVfQegqp7s2P414Htt9QCwqGP3ha3GOPWngblJTmtnB53jJUk90M3TRAFuAO6vqi931M/qGPY+4MjzWjuA9UnOSLIEWArcBewBlrYnh05n9Cbzjqoq4Hbg4rb/BuDWyU1LknQ8ujkzeBfwIeDeJHtb7dOMPg20AijgEeCjAFW1L8ktwH2MPol0eVW9DJBkE7ALmANsrap97XifArYn+RzwU0bDR5LUIxOGQVX9GMgYm3YeY59rgGvGqO8ca7+qeojRp40kSX3g11FIkgwDSZJhIEnCMJAkYRhIkjAMJEkYBpIkDANJEoaBJAnDQJKEYSBJwjCQJNHl3zOQdGoYGhqaeJA0Bs8MJEmGgSTJMJAkYRhIkjAMJEkYBpIkDANJEoaBJAnDQJJEF2GQZFGS25Pcl2Rfko+3+uuS7E7yYPs5r9WT5Lokw0nuSfKOjmNtaOMfTLKho/7OJPe2fa5LkumYrCRpbN2cGRwGPllVy4DVwOVJlgFXALdV1VLgtrYOcAGwtL02AtfDaHgAm4GzgVXA5iMB0sZ8pGO/tZOfmiSpWxOGQVU9XlU/acu/BO4HFgDrgG1t2Dbgora8DrixRt0BzE1yFnA+sLuqDlbVM8BuYG3b9tqquqOqCrix41iSpB44rnsGSRYDbwfuBOZX1eNt0xPA/La8AHisY7f9rXas+v4x6mO9/8Ykg0kGR0ZGjqd1SdIxdB0GSV4DfBv4RFU937mt/UZfU9zbb6mqLVW1sqpWDgwMTPfbSdKs0VUYJHklo0FwU1V9p5WfbJd4aD+favUDwKKO3Re22rHqC8eoS5J6pJuniQLcANxfVV/u2LQDOPJE0Abg1o76pe2potXAc+1y0i5gTZJ57cbxGmBX2/Z8ktXtvS7tOJYkqQe6+eM27wI+BNybZG+rfRr4PHBLksuAR4EPtG07gQuBYeAF4MMAVXUwydXAnjbus1V1sC1/DPg68Crg++0lSeqRCcOgqn4MjPfc/3ljjC/g8nGOtRXYOkZ9EFg+US+SpOnhJ5AlSYaBJMkwkCRhGEiSMAwkSRgGkiQMA0kShoEkCcNAkoRhIEnCMJAkYRhIkjAMJEkYBpIkDANJEoaBJAnDQJKEYSBJwjCQJGEYSJIwDCRJGAaSJLoIgyRbkzyVZKij9pkkB5Lsba8LO7ZdmWQ4yQNJzu+or2214SRXdNSXJLmz1W9OcvpUTlCSNLFuzgy+Dqwdo35tVa1or50ASZYB64G3tH2+mmROkjnAV4ALgGXAJW0swBfasd4EPANcNpkJSZKO34RhUFU/Ag52ebx1wPaqerGqHgaGgVXtNVxVD1XVS8B2YF2SAOcC32r7bwMuOs45SJImaTL3DDYluaddRprXaguAxzrG7G+18eqvB56tqsNH1SVJPXSiYXA98EZgBfA48KUp6+gYkmxMMphkcGRkpBdvKUmzwgmFQVU9WVUvV9WvgK8xehkI4ACwqGPowlYbr/40MDfJaUfVx3vfLVW1sqpWDgwMnEjrkqQxnFAYJDmrY/V9wJEnjXYA65OckWQJsBS4C9gDLG1PDp3O6E3mHVVVwO3AxW3/DcCtJ9KTJOnEnTbRgCTfBM4BzkyyH9gMnJNkBVDAI8BHAapqX5JbgPuAw8DlVfVyO84mYBcwB9haVfvaW3wK2J7kc8BPgRumbHaSpK5MGAZVdckY5XH/wa6qa4BrxqjvBHaOUX+I/7/MJEnqAz+BLEkyDCRJhoEkCcNAkoRhIEnCMJAkYRhIkjAMJEkYBpIkDANJEoaBJAnDQJKEYSBJwjCQJGEYSJIwDCRJGAaSJAwDSRKGgSSJLv4GsqTjMzQ01LP3OnToUM/fUzOTZwaSJMNAktRFGCTZmuSpJEMdtdcl2Z3kwfZzXqsnyXVJhpPck+QdHftsaOMfTLKho/7OJPe2fa5LkqmepCTp2Lo5M/g6sPao2hXAbVW1FLitrQNcACxtr43A9TAaHsBm4GxgFbD5SIC0MR/p2O/o95IkTbMJw6CqfgQcPKq8DtjWlrcBF3XUb6xRdwBzk5wFnA/srqqDVfUMsBtY27a9tqruqKoCbuw4liSpR070nsH8qnq8LT8BzG/LC4DHOsbtb7Vj1fePUZck9dCkbyC33+hrCnqZUJKNSQaTDI6MjPTiLSVpVjjRMHiyXeKh/Xyq1Q8AizrGLWy1Y9UXjlEfU1VtqaqVVbVyYGDgBFuXJB3tRMNgB3DkiaANwK0d9UvbU0Wrgefa5aRdwJok89qN4zXArrbt+SSr21NEl3YcS5LUIxN+AjnJN4FzgDOT7Gf0qaDPA7ckuQx4FPhAG74TuBAYBl4APgxQVQeTXA3saeM+W1VHbkp/jNEnll4FfL+9JEk9NGEYVNUl42w6b4yxBVw+znG2AlvHqA8CyyfqQ5I0ffwEsiTJMJAkGQaSJAwDSRKGgSQJw0CShGEgScIwkCRhGEiSMAwkSRgGkiQMA0kShoEkCcNAkoRhIEnCMJAkYRhIkjAMJEkYBpIkDANJEoaBJAnDQJKEYSBJYpJhkOSRJPcm2ZtksNVel2R3kgfbz3mtniTXJRlOck+Sd3QcZ0Mb/2CSDZObkiTpeE3FmcG7q2pFVa1s61cAt1XVUuC2tg5wAbC0vTYC18NoeACbgbOBVcDmIwEiSeqN6bhMtA7Y1pa3ARd11G+sUXcAc5OcBZwP7K6qg1X1DLAbWDsNfUmSxjHZMCjgB0nuTrKx1eZX1eNt+QlgflteADzWse/+Vhuv/luSbEwymGRwZGRkkq1Lko44bZL7/2lVHUjyBmB3kp93bqyqSlKTfI/O420BtgCsXLlyyo4rSbPdpM4MqupA+/kU8F1Gr/k/2S7/0H4+1YYfABZ17L6w1carS5J65ITDIMmrk/zukWVgDTAE7ACOPBG0Abi1Le8ALm1PFa0GnmuXk3YBa5LMazeO17SaJKlHJnOZaD7w3SRHjvONqvq3JHuAW5JcBjwKfKCN3wlcCAwDLwAfBqiqg0muBva0cZ+tqoOT6EsCYGhoqN8tSKeMEw6DqnoIeNsY9aeB88aoF3D5OMfaCmw90V4kSZPjJ5AlSYaBJMkwkCRhGEiSMAwkSRgGkiQMA0kShoEkCcNAkoRhIEnCMJAkYRhIkjAMJElM/i+dSdKs1K+vSF++fPm0HNczA0mSYSBJMgwkSXjPQNPMPz0pnRo8M5AkGQaSJMNAkoRhIEniJAqDJGuTPJBkOMkV/e5HkmaTk+JpoiRzgK8A7wX2A3uS7Kiq+/rb2czhUz2SjuWkCANgFTBcVQ8BJNkOrANmVBj4D7Kkk1Wqqt89kORiYG1V/XVb/xBwdlVtOmrcRmBjW30z8EBPGz1+ZwK/6HcTPTKb5grOdyab6XP9w6oaOLp4spwZdKWqtgBb+t1Ht5IMVtXKfvfRC7NpruB8Z7LZNNdOJ8sN5APAoo71ha0mSeqBkyUM9gBLkyxJcjqwHtjR554kadY4KS4TVdXhJJuAXcAcYGtV7etzW1PhlLmkNQVm01zB+c5ks2muv3ZS3ECWJPXXyXKZSJLUR4aBJMkw6JUkn0xSSc7sdy/TJcnVSe5JsjfJD5L8Qb97mk5Jvpjk523O300yt989TZck70+yL8mvkszYxy5n89fiGAY9kGQRsAb47373Ms2+WFVvraoVwPeAv+t3Q9NsN7C8qt4K/CdwZZ/7mU5DwF8AP+p3I9Ol42txLgCWAZckWdbfrnrHMOiNa4G/BWb03fqqer5j9dXM/Pn+oKoOt9U7GP18zIxUVfdX1cn+if/J+vXX4lTVS8CRr8WZFU6KR0tnsiTrgANV9bMk/W5n2iW5BrgUeA54d5/b6aW/Am7udxOalAXAYx3r+4Gz+9RLzxkGUyDJD4HfH2PTVcCnGb1ENCMca65VdWtVXQVcleRKYBOwuacNTrGJ5tvGXAUcBm7qZW9TrZu5auYyDKZAVb1nrHqSPwaWAEfOChYCP0myqqqe6GGLU2a8uY7hJmAnp3gYTDTfJH8J/DlwXp3iH9o5jv+3M9Ws/locw2AaVdW9wBuOrCd5BFhZVTPyGxGTLK2qB9vqOuDn/exnuiVZy+i9oD+rqhf63Y8m7ddfi8NoCKwHPtjflnrHMNBU+nySNwO/Ah4F/qbP/Uy3fwLOAHa3M787qmpGzjnJ+4B/BAaAf02yt6rO73NbU2oGfy1OV/w6CkmSj5ZKkgwDSRKGgSQJw0CShGEgScIwkCRhGEiSgP8DOcYzf/DEYjcAAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "fig, ax = plt.subplots()\n",
        "plt.axvline(x = xbar, color='orange')\n",
        "plt.axvline(x = xbar+sigma, color='olivedrab')\n",
        "plt.axvline(x = xbar-sigma, color='olivedrab')\n",
        "_ = plt.hist(x, color = 'lightgray')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MtQ3n34PJy9-"
      },
      "source": [
        "#### Standard Error"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "waS0PbnYJy9-"
      },
      "source": [
        "A further derivation of standard deviation is **standard error**, which is denoted with $\\sigma_\\bar{x}$:\n",
        "$$ \\sigma_\\bar{x} = \\frac{\\sigma}{\\sqrt{n}} $$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W9f9__wlJy9_",
        "outputId": "42f7fa6a-42c4-46fb-e3c2-e719fb58566b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0019686669415011045"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "sigma/(x.size)**(1/2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "toH48k6TJy9_",
        "outputId": "11b21aec-5cb2-4da0-a10e-16b6f6490624"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0019686767849096377"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "st.sem(x) # defaults to 1 degree of freedom, which can be ignored with the larger data sets of ML"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OeYF2Zh2Jy9_",
        "outputId": "fb7e5954-8912-4c81-9da5-38a90692d5e1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0019686669415011045"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "st.sem(x, ddof=0)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "18G3AEvTJy9_"
      },
      "source": [
        "Standard error enables us to compare whether the means of two distributions differ *significantly*, a focus of *Intro to Stats*."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W8d9xMvcJy9_"
      },
      "source": [
        "### Gaussian Distribution"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LG3mP9v-Jy9_"
      },
      "source": [
        "After Carl Friedrich Gauss. Also known as **normal distribution**: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3SsBbCQ1Jy-A"
      },
      "outputs": [],
      "source": [
        "x = np.random.normal(size=10000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aWlsZ80_Jy-A"
      },
      "outputs": [],
      "source": [
        "sns.set_style('ticks')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EYkD9BQsJy-A",
        "outputId": "7a9d4614-3611-4da9-bfdd-3a18e8b71b21"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "_ = sns.displot(x, kde=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bQULpJasJy-A"
      },
      "source": [
        "When the normal distribution has a mean ($\\mu$) of zero and standard deviation ($\\sigma$) of one, as it does by default with the NumPy `normal()` method..."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kF2vyBE5Jy-A",
        "outputId": "df8a1772-6096-46ae-d6b3-a34fbb96c5b9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-0.012263872029166486"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "x.mean()\n",
        "# -0.009264171747108127"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BBfTSFSLJy-A",
        "outputId": "0c2571ac-b284-4871-8612-c06253bc1b01",
        "scrolled": true
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0052923145653383"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "x.std()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b36uZPgYJy-B"
      },
      "source": [
        "...it is a **standard normal distribution** (a.k.a., standard Gaussian distribution or ***z*-distribution**), which can be denoted as $\\mathcal{N}(\\mu, \\sigma^2) = \\mathcal{N}(0, 1)$ (noting that $\\sigma^2 = \\sigma$ here because $1^2 = 1$)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yghrt7snJy-B"
      },
      "source": [
        "Normal distributions are by far the most common distribution in statistics and machine learning. They are typically the default option, particularly if you have limited information about the random process you're modeling, because: \n",
        "\n",
        "1. Normal distributions assume the greatest possible uncertainty about the random variable they represent (relative to any other distribution of equivalent variance). Details of this are beyond the scope of this tutorial. \n",
        "2. Simple and very complex random processes alike are, under all common conditions, normally distributed when we sample values from the process. Since we sample data for statistical and machine learning models alike, this so-called **central limit theorem** (covered next) is a critically important concept. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i_o6lW48Jy-B"
      },
      "source": [
        "### The Central Limit Theorem"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eGcUitnfJy-B"
      },
      "source": [
        "To develop a functional understanding of the CLT, let's sample some values from our normal distribution:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zde5lo4oJy-B",
        "outputId": "074eaaf7-c26e-4a7f-9639-57ed7bb6d6ec"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0.32798304, -0.4508194 ,  0.43076423,  0.4664907 , -0.10792216])"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "x_sample = np.random.choice(x, size=5, replace=False)\n",
        "x_sample"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AHPHlFhHJy-B"
      },
      "source": [
        "The mean of a sample isn't always going to be close to zero with such a small sample:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JlQhC9RrJy-C",
        "outputId": "050ee7b6-2785-4a47-dd4f-c7a78ebe40ec"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.13329928235196142"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "x_sample.mean()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z5CMNU_MJy-C"
      },
      "source": [
        "Let's define a function for generating **sampling distributions** of the mean of a given input distribution:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RSUYBNRlJy-C"
      },
      "outputs": [],
      "source": [
        "def sample_mean_calculator(input_dist, sample_size, n_samples):\n",
        "    sample_means = []\n",
        "    for i in range(n_samples):\n",
        "        sample = np.random.choice(input_dist, size=sample_size, replace=False)\n",
        "        sample_means.append(sample.mean())\n",
        "    return sample_means"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AwW1d39vLJff"
      },
      "outputs": [],
      "source": [
        "xc = sample_mean_calculator(x, 25, 70)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6QOiVR1tLJfg",
        "outputId": "c1136afe-5ef0-4ee7-d108-d06987aca9d5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.13077488289029893,\n",
              " 0.056662278738313636,\n",
              " 0.11063568483295189,\n",
              " 0.3066618561624863,\n",
              " -0.1478716684444025,\n",
              " -0.05771469909176465,\n",
              " -0.04253062279858153,\n",
              " 0.3151547213845655,\n",
              " -0.3633385851756445,\n",
              " -0.2993990879823573,\n",
              " -0.07755673096037388,\n",
              " -0.31559977460218935,\n",
              " -0.042647965142941134,\n",
              " 0.00731620546371417,\n",
              " 0.14279647834233433,\n",
              " 0.04387946703699086,\n",
              " -0.12861540406575941,\n",
              " -0.06774402922883509,\n",
              " -0.11564588780446111,\n",
              " -0.6139327527583182,\n",
              " 0.11250539469763118,\n",
              " -0.05845111550369007,\n",
              " -0.033464287662056995,\n",
              " 0.49074692910783624,\n",
              " -0.09075207789891217,\n",
              " 0.1192554439667418,\n",
              " -0.13596143532546837,\n",
              " 0.12150405953908079,\n",
              " -0.0453538835603978,\n",
              " 0.27996865014827194,\n",
              " 0.10380775191151508,\n",
              " 0.14132735169346153,\n",
              " 0.18372271576514124,\n",
              " 0.16921777211093317,\n",
              " -0.022704344455839257,\n",
              " -0.07129489089381337,\n",
              " -0.03049338134321758,\n",
              " -0.14549962192076113,\n",
              " -0.08838529106207595,\n",
              " -0.1451798838787223,\n",
              " -0.31413311178186343,\n",
              " 0.11518732057203111,\n",
              " -0.047869879857366515,\n",
              " 0.08158586100046497,\n",
              " -0.1790488884974766,\n",
              " -0.06190671060514221,\n",
              " 0.24649153608697635,\n",
              " -0.12555641647599278,\n",
              " 0.28372214207375285,\n",
              " -0.26111127242620996,\n",
              " -0.07011037465896891,\n",
              " 0.05836476039585266,\n",
              " -0.10033938366275404,\n",
              " 0.24690939456712546,\n",
              " 0.10557952728215522,\n",
              " 0.01297901558690005,\n",
              " -0.24524876289154812,\n",
              " 0.08927037161364205,\n",
              " 0.23204103472110219,\n",
              " 0.26411397476520415,\n",
              " -0.09985277917780314,\n",
              " 0.2574793346713165,\n",
              " -0.2665286635559184,\n",
              " -0.02941749303936585,\n",
              " 0.24401166924760898,\n",
              " -0.10874151036214584,\n",
              " 0.11867278790511855,\n",
              " -0.03994267706709458,\n",
              " -0.18853690667877557,\n",
              " -0.43521017252764643]"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "xc"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "oI18ruGRJy-C",
        "outputId": "2ff817d8-563c-45d0-fe5d-08e3caefecbb"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.displot(sample_mean_calculator(x, 25, 70), color='green', kde=True)\n",
        "_ = plt.xlim(-1.5, 1.5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UYgPaKGzLJfg"
      },
      "source": [
        "# 21-4-2022 done"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xHGa07YxJy-C"
      },
      "source": [
        "The more samples we take, the more likely that the sampling distribution of the means will be normally distributed: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "OPT9azuTJy-C",
        "outputId": "46d729a6-554a-47a2-a90f-aa8fa23377a0"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.displot(sample_mean_calculator(x, 10, 1000), color='green', kde=True)\n",
        "_ = plt.xlim(-1.5, 1.5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JhYHcSXSJy-C"
      },
      "source": [
        "The larger the sample, the tighter the sample means will tend to be around the population mean:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "Bx3AvY5GJy-D",
        "outputId": "c8afc5d3-366d-4e93-f4f8-3309c8aef318"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.displot(sample_mean_calculator(x, 100, 1000), color='green', kde=True)\n",
        "_ = plt.xlim(-1.5, 1.5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "EhsVc9EUJy-D",
        "outputId": "0dc2c1dd-1136-4760-ec45-bd26a0d57bd3"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.displot(sample_mean_calculator(x, 1000, 1000), color='green', kde=True)\n",
        "_ = plt.xlim(-1.5, 1.5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uwW98i_MJy-E"
      },
      "source": [
        "#### Sampling from a skewed distribution"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZcAhyVlfJy-E"
      },
      "outputs": [],
      "source": [
        "s = st.skewnorm.rvs(10, size=10000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "5agwbQu-Jy-E",
        "outputId": "a00e1c7e-0663-4d3c-b4e9-e669f60ab296"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "_ = sns.displot(s, kde=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "1rU7N_XIJy-F",
        "outputId": "b44d295d-fe06-4b4c-84c3-4741c5317899"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "_ = sns.displot(sample_mean_calculator(s, 10, 1000), color='green', kde=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "Gf8z-zWnJy-F",
        "outputId": "f61a3d7b-7612-41c1-e6ca-98c27d3849bb"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "_ = sns.displot(sample_mean_calculator(s, 1000, 1000), color='green', kde=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "khgxd4kKJy-F"
      },
      "source": [
        "#### Sampling from a multimodal distribution"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BwddoyHZJy-F"
      },
      "outputs": [],
      "source": [
        "m = np.concatenate((np.random.normal(size=5000), np.random.normal(loc = 7.0, size=5000)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "b7-jIOsKJy-F",
        "outputId": "0660d4d5-18aa-4de4-a044-4c240593d73e"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "_ = sns.displot(m, kde=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "FgDJbhHNJy-G",
        "outputId": "44b5e56d-6138-4215-92f4-e938d9325529"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "_ = sns.displot(sample_mean_calculator(m, 1000, 1000), color='green', kde=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O1xAAvNsJy-G"
      },
      "source": [
        "#### Sampling from uniform"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GPGNikM2Jy-G"
      },
      "source": [
        "Even sampling from the highly non-normal uniform distribution, the sampling distribution comes out normal: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "P72RDUP_Jy-G"
      },
      "outputs": [],
      "source": [
        "u = np.random.uniform(size=10000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "NnSaVMzzJy-G",
        "outputId": "eed3e246-e0aa-4997-9a3f-8bc0ba03f5a4"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "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CDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARggwABghwABghAADgBECDABGCDAAGCHAAGCEAAOAEQIMAEYIMAAYIcAAYIQAA4ARAgwARgZUgOvr65Wbm6tAIKDy8nLrcQDAVQMmwD09Pfrtb3+r559/Xnv37tVrr72m9957z3osAHDNgAnw0aNH9eUvf1kZGRkaNmyY5syZo5qaGuuxAMA1HsdxHOshJOn111/Xm2++qY0bN0qSqqqqdPToUa1du/aaywWDQQWDQUnSyZMn9ZWvfKXXP6u1tVWjRo26+aEHGNYVXxJ1XVLirq2v6xo1apReeOGF644n9cdQsVRcXKzi4uKbuo7CwkJVVlb200QDB+uKL4m6Lilx19bf6xowWxBer1ehUCjyeTgcltfrNZwIANw1YAI8ZcoUNTU16dSpU+rq6tLevXvl9/utxwIA1wxdt27dOushJGnIkCG6/fbbtXz5cr300ku69957lZub69rPmzx5smvXbYl1xZdEXZeUuGvrz3UNmDvhAGCwGTBbEAAw2BBgADCSsAH+vKc1d3V1qbS0VIFAQEVFRTp9+rTBlH3zeWvbvn27Zs+erby8PP3kJz/RmTNnDKbsvWifir5//35NnDhR7777bgyn67to1rVv3z7Nnj1bc+bM0aOPPhrjCfvu89b23//+Vw8++KDy8/OVl5enuro6gyl7Z9WqVcrOztbcuXM/8+uO42jDhg0KBALKy8vT8ePH+/7DnATU3d3tzJw50/nwww+dzs5OJy8vzzlx4sQ1l3nppZecNWvWOI7jOK+99pqzZMkSi1F7LZq1NTQ0OJcuXXIcx3F27twZF2uLZl2O4zgdHR3O/PnznaKiIufo0aMGk/ZONOs6efKkc9999zltbW2O4zjOuXPnLEbttWjWtnr1amfnzp2O4zjOiRMnnBkzZliM2iuHDx92jh075syZM+czv/7GG284CxcudK5cueIcOXLEmTdvXp9/VkKeAUfztOba2loVFBRIknJzc9XQ0CAnDu6PjGZtWVlZSk5OliRlZmZe8/jqgSrap6I/++yz+tnPfqbhw4cbTNl70azrlVde0QMPPKCRI0dKktLT0y1G7bVo1ubxeHThwgVJUkdHh8aMGWMxaq/cddddkX+Lz1JTU6P8/Hx5PB5lZmaqvb1dzc3NffpZCRngcDgsn88X+dzr9SocDl93mbFjx0qSkpKSlJKSotbW1pjO2RfRrO3TKioqlJOTE4vRbko06zp+/LhCoZC+973vxXi6votmXU1NTTp58qTuv/9+/fCHP1R9fX2sx+yTaNb28MMP69VXX1VOTo4WLVqk1atXx3rMfvf/1+3z+W74N3gjCRlgXLVnzx4dO3ZMDz30kPUoN+3KlSt68skn9dhjj1mP0u96enr0wQcf6A9/+IOefvpprVmzRu3t7dZj9Yu9e/eqoKBA9fX1Ki8v14oVK3TlyhXrsQaMhAxwNE9r9nq9Onv2rCSpu7tbHR0dcfHiIdE+Zfvtt9/Wtm3btHXrVg0bNiyWI/bJ563r4sWL+ve//60f//jH8vv9amxs1C9/+csBf0dctL+Lfr9ft9xyizIyMnT77berqakpxpP2XjRrq6io0D333CNJ+ta3vqXOzs64uKV5I/9/3aFQqM8vm5CQAY7mac1+v1+7d++WdPVe9aysLHk8HotxeyWatf3jH//Q2rVrtXXr1rjZT/y8daWkpOhvf/ubamtrVVtbq8zMTG3dulVTpkwxnPrzRfPv9f3vf1+HDx+WJJ0/f15NTU3KyMiwGLdXolnb2LFj1dDQIEl6//331dnZqbS0NItx+43f71dVVZUcx1FjY6NSUlL6vLcdd6+GFo2kpCStXbtWDz30kHp6evSDH/xAd955p5599llNnjxZM2fO1Lx587R8+XIFAgGNHDlSmzdvth47KtGs7amnntKlS5e0ZMkSSVf/CLZt22Y8+Y1Fs654FM26vvvd7+qtt97S7NmzNXToUK1YsSIubo1Fs7aVK1dq9erV+v3vfy+Px6Mnn3xywJ/oLFu2TIcPH1Zra6tycnL0yCOPqLu7W5L0ox/9SNOnT1ddXZ0CgYCSk5NVVlbW55/FU5EBwEhCbkEAQDwgwABghAADgBECDABGCDAAGCHAAGCEAAOAkf8DODp1oBgkLj8AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "_ = sns.displot(u)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "6ofAl-bXJy-G",
        "outputId": "9079553f-3a3c-4d41-cbb9-89c822ce46da"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "_ = sns.displot(sample_mean_calculator(u, 1000, 1000), color='green', kde=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CzsGWDvgJy-G"
      },
      "source": [
        "Therefore, with large enough sample sizes, we can assume the sampling distribution of the means will be normally distributed, allowing us to apply statistical and ML models that are configured for normally distributed noise, which is often the default assumption.\n",
        "\n",
        "As an example, the \"*t*-test\" (covered shortly in *Intro to Stats*) allows us to infer whether two samples come from different populations (say, an experimental group that receives a treatment and a control group that receives a placebo). Thanks to the CLT, we can use this test even if we have no idea what the underlying distributions of the populations being tested are, which may be the case more frequently than not. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qdoH1h1cJy-H"
      },
      "source": [
        "### z-scores"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "amWbtyvMJy-H"
      },
      "source": [
        "Assuming normally-distributed data, a z-score indicates how many standard deviations away from the mean a data point (say, $x_i$) is: \n",
        "$$ z = \\frac{x_i-\\mu}{\\sigma} $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MR7WaPXEJy-H"
      },
      "source": [
        "That is, the formula *standardizes* a given score $x_i$ to the (standard normal) *z*-distribution. (As we covered in *Probability & Information Theory*, you could standardize any normal distribution to a mean of zero and standard deviation of one by subtracting its original mean and then dividing by its original standard deviation.)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hTAg32LLJy-H"
      },
      "source": [
        "For example, let's say you get 85% on a CS101 exam. Sounds like a pretty good score and you did extremely well relative to your peers if the mean was 60% with a standard deviation of 10%:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nCN9Lrc5Jy-H"
      },
      "outputs": [],
      "source": [
        "x_i = 85\n",
        "mu = 60\n",
        "sigma = 10"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oTVMKmYwJy-H"
      },
      "outputs": [],
      "source": [
        "x = np.random.normal(mu, sigma, 10000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "JiCkR-4YJy-H",
        "outputId": "e058bb9a-4a3d-4864-f4a6-8730c82e2935"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.displot(x, color='gray')\n",
        "ax.set_xlim(50, 100)\n",
        "plt.axvline(mu, color='orange')\n",
        "for v in [-3, -2, -1, 1, 2, 3]:\n",
        "    plt.axvline(mu+v*sigma, color='olivedrab')\n",
        "_ = plt.axvline(x_i, color='purple')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xWcxcmDlJy-I"
      },
      "source": [
        "Your z-score is 2.5 standard deviations above the mean: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "63mlk5oEJy-I",
        "outputId": "962ebcfd-d41f-4be5-bd51-2f9701992f07"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.5"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ],
      "source": [
        "z = (x_i - mu)/sigma\n",
        "z"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zh2fhCRDJy-I"
      },
      "source": [
        "Or using our simulated class of 10k CS101 students: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XwbcdpwYJy-I",
        "outputId": "0f52fe26-2073-44de-a8d4-a3b9cf49a106"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.481555990773599"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ],
      "source": [
        "z = (x_i - np.mean(x))/np.std(x)\n",
        "z"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Iw7tDGYCJy-J"
      },
      "source": [
        "Less than one percent of the class outperformed you: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EeVjREfhJy-J",
        "outputId": "73a35f9c-3203-4350-e955-acd479a2c11b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "68"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ],
      "source": [
        "len(np.where(x > 85)[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pcJS3YIRJy-J",
        "outputId": "5fcd4ba9-ccdd-4993-b6a8-47201727359e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.68"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ],
      "source": [
        "100*68/10000"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "biFn-h76Jy-J",
        "outputId": "54fca6bf-3c4d-47bc-a7c9-5aeb801d6079"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "86.32456941756404"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ],
      "source": [
        "np.percentile(x, 99.5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cAZhJMenJy-J"
      },
      "source": [
        "In contrast, if the mean score of your peers is 90 and the standard deviation is 2: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fZj22bDfJy-J"
      },
      "outputs": [],
      "source": [
        "mu = 90\n",
        "sigma = 2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6M0zc3PKJy-K"
      },
      "outputs": [],
      "source": [
        "y = np.random.normal(mu, sigma, 10000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "dj2CWs5kJy-K",
        "outputId": "265448f1-fa2a-40d9-d7dc-038b89c62c79"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.displot(y, color='gray')\n",
        "plt.axvline(mu, color='orange')\n",
        "for v in [-3, -2, -1, 1, 2, 3]:\n",
        "    plt.axvline(mu+v*sigma, color='olivedrab')\n",
        "_ = plt.axvline(x_i, color='purple')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z1b5fEFZJy-K"
      },
      "source": [
        "Your z-score is 2.5 standard deviations *below* the mean (!): "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tnDjdaP2Jy-L",
        "outputId": "84680251-222c-435a-96ba-459e4ce21485"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-2.5"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ],
      "source": [
        "z = (x_i - mu)/sigma\n",
        "z"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VWZ7yvTZJy-L"
      },
      "source": [
        "Or using our simulated class of 10k CS101 students: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TgBIWccvJy-L",
        "outputId": "ed8d8d38-f3ac-46ed-84b9-67d42caf3cd3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-2.4994901383359225"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ],
      "source": [
        "z = (x_i - np.mean(y))/np.std(y)\n",
        "z"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VR6cZOCVJy-L"
      },
      "source": [
        "In which case, over 99% of the class outperformed you: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7y4fP6U-Jy-L",
        "outputId": "fd58fcea-f126-4f35-8a34-c7cfec669197"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9926"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ],
      "source": [
        "len(np.where(y > 85)[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KLH3RI-yJy-L",
        "outputId": "2ca317b7-5fad-46fa-b917-46b39ce60875"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "99.33"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ],
      "source": [
        "100*9933/10000"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bFacTGGvJy-M"
      },
      "source": [
        "A mere 67 folks attained worse: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cgc7QrXxJy-M",
        "outputId": "2087fc12-5d83-45ce-cbec-4108edcab038"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "67"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ],
      "source": [
        "10000-9933"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aY7HDwhkJy-M",
        "outputId": "cc96e625-0644-4e0e-da4f-15ec24fce626"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "85.22912605739755"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ],
      "source": [
        "np.percentile(y, 1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aoqKrAPOJy-M"
      },
      "source": [
        "A frequentist convention is to consider a data point that lies further than three standard deviations from the mean to be an **outlier**. \n",
        "\n",
        "It's a good idea to individually investigate outliers in your data as they may represent an erroneous data point (e.g., some data by accident, a data-entry error, or a failed experiment) that perhaps should be removed from further analysis (especially, as outliers can have an outsized impact on statistics including mean and correlation). It may even tip you off to a major issue with your data-collection methodology or your ML model that can be resolved or that you could have a unit test for."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VeTGuUJnJy-M"
      },
      "source": [
        "**Exercises**\n",
        "\n",
        "1. You clean and jerk 100kg in a weightlifting competition. The mean C&J weight at the competition is 100kg. What's your z-score for the C&J?\n",
        "2. You snatch 100kg in the same competition. The mean snatch weight is 80kg with a standard deviation of 10kg. What's your z-score for the snatch? \n",
        "3. In olympic weightlifting, your overall score is the sum total of your C&J and snatch weights. The mean of these totals across competitors is 180kg with a standard deviation of 5kg. What's your overall z-score in the competition? \n",
        "\n",
        "**Spoiler alert**: Solutions below"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yZxLOlbAJy-N"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7By8Gc4TJy-N"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Zl4Rnr5JJy-P"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NlFugQ1VJy-P"
      },
      "source": [
        "**Solutions**\n",
        "1. zero\n",
        "2. two\n",
        "3. four (you may have won the meet!)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PNB9TnHgJy-P"
      },
      "source": [
        "### *p*-values"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JFpWDfhPJy-P"
      },
      "source": [
        "These quantify the *p*robability that a given observation would occur by chance alone. \n",
        "\n",
        "For example, we saw above that with our simulated 10k exam results, only 69 folks attained a *z*-score above 2.5 and only 67 (=10000-9993) attained a *z*-score below -2.5. Thus, if we were to randomly sample one of the 10k CS101 exam results, we would expect it to be outside of 2.5 (i.e., +/- 2.5) standard deviations only 1.36% of the time: \n",
        "$$ \\frac{69+67}{10000} = 0.0136 = 1.36\\% $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uZGJqELvJy-Q"
      },
      "source": [
        "Equivalent to increasing our CS101 class size from 10k toward infinity, the probability of a score being further than 2.5 standard deviations from the mean of a normal distribution can be determined with the distribution's *cumulative distribution function* (CDF): "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5s-ySScTJy-Q",
        "outputId": "53e164ea-ed9a-428f-8f15-d7ba511f59b9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.006209665325776132"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ],
      "source": [
        "p_below = st.norm.cdf(-2.5)\n",
        "p_below"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u62I9OjtJy-Q",
        "outputId": "319171c6-3422-4572-9c45-3898e9479890"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "62.096653257761325"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ],
      "source": [
        "p_below*10000"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "0-AGIPvRJy-Q",
        "outputId": "fdf4df5f-6664-465e-8412-e7ba462d7f55"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.displot(y, color='gray')\n",
        "_ = plt.axvline(mu-2.5*sigma, color='blue')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nI18Ajo-Jy-Q",
        "outputId": "28f2568d-c45f-4e08-cf66-e712f2f33aab"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9937903346742238"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ],
      "source": [
        "st.norm.cdf(2.5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XeX3OfokJy-Q",
        "outputId": "e67d21da-3d10-40e5-98dd-95662cd57d97"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.006209665325776159"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ],
      "source": [
        "p_above = 1-st.norm.cdf(2.5)\n",
        "p_above"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GQ4fjiJZJy-Q",
        "outputId": "770e2b05-38bd-4a27-c8a4-4d2204026f8d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "62.09665325776159"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ],
      "source": [
        "p_above*10000"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "e8-QvwuNJy-R",
        "outputId": "b9be3886-8fd5-48a8-eeed-55775903f143"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.displot(y, color='gray')\n",
        "_ = plt.axvline(mu+2.5*sigma, color='blue')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GYllm_UaJy-R",
        "outputId": "935f801d-b019-4c64-f9dd-7264f623373d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.01241933065155229"
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ],
      "source": [
        "p_outside = p_below + p_above\n",
        "p_outside"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "44Cq4EtKJy-R",
        "outputId": "13199b99-b556-44bd-c364-7c5456175a86"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "124.1933065155229"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ],
      "source": [
        "p_outside*10000"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "6zdZEbPmJy-R",
        "outputId": "6b56ae8c-51ff-4b87-9615-f455f891a3f8"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.displot(y, color='gray')\n",
        "plt.axvline(mu+2.5*sigma, color='blue')\n",
        "_ = plt.axvline(mu-2.5*sigma, color='blue')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I0TSl17uJy-R"
      },
      "source": [
        "In other words, assuming a normal distribution, the probability (the *p*-value) of a sampled value being at least 2.5 standard deviations away from the mean by ** chance alone ** is $p \\approx .0124$."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4syN_b9hJy-R"
      },
      "source": [
        "The frequentist convention is that if a *p*-value is less than .05, we can say that it is a \"statistically significant\" observation. We typically denote this significance threshold with $\\alpha$, e.g., $\\alpha = .05$.\n",
        "\n",
        "For example, with a fair coin, the probability of throwing six heads *or* six tails in a six-coin-flip experiment is 0.03125 ($p = 0.015625$ for *either of* six heads or six tails). Refer back to the `coinflip_prob()` method from the [*Probability* notebook](https://github.com/jonkrohn/ML-foundations/blob/master/notebooks/5-probability.ipynb) for proof.\n",
        "\n",
        "If a friend of yours hands you a coin, the **null hypothesis** (the baseline assumed by the fair-toss distribution) would be that the coin is fair. If you test this coin by flipping it six times and it comes up heads on all six or tails on all six, this observation would suggest that you should *reject the null hypothesis* because chance alone would facilitate such an observation less than 5% of the time, i.e., $p < .05$."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KMt6x7BQJy-S"
      },
      "source": [
        "The *z*-scores corresponding to $\\alpha = .05$ can be obtained from the normal distribution's *percent point function* (PPF), which facilitates the inverse of the CDF. To capture 95% of the values around the mean, we leave 2.5% at the bottom of the distribution and 2.5% at the top: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y3ZqdV9WJy-S",
        "outputId": "fbe8cfb2-364e-4167-a75c-98ef2c321654"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-1.9599639845400545"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ],
      "source": [
        "st.norm.ppf(.025)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VJGV5em-Jy-S",
        "outputId": "778a2b1e-c056-4f3e-fce2-cf8d5f6180d5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.959963984540054"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ],
      "source": [
        "st.norm.ppf(.975)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RObWUObeJy-S"
      },
      "source": [
        "Thus, at the traditional $\\alpha = .05$, a sampled value with *z*-score less than -1.96 or greater than 1.96 would be considered statistically significant."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "a7yRDzN-Jy-S",
        "outputId": "c3963136-7303-4f2d-eee2-c93d7915cb92"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.displot(y, color='gray')\n",
        "plt.axvline(mu+1.96*sigma, color='darkred')\n",
        "_ = plt.axvline(mu-1.96*sigma, color='darkred')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "esOQED5oqLSL"
      },
      "source": [
        "With a stricter threshold, say $\\alpha = .01$:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2J1meOTUqIcG",
        "outputId": "10e51b59-d550-464c-d53d-30c217a21493"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-2.575829303548901"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ],
      "source": [
        "st.norm.ppf(.005)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DYqpw9SpqQNc",
        "outputId": "9f228360-ea2f-4559-c10c-785532ec5708"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.5758293035489004"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ],
      "source": [
        "st.norm.ppf(.995)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "H5JqPoSdqSlp",
        "outputId": "d0bb0b8d-891f-4e99-b71d-c14ecb34892e"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.displot(y, color='gray')\n",
        "\n",
        "plt.axvline(mu+1.96*sigma, color='darkred')\n",
        "plt.axvline(mu-1.96*sigma, color='darkred')\n",
        "\n",
        "plt.axvline(mu+2.56*sigma, color='black')\n",
        "_ = plt.axvline(mu-2.56*sigma, color='black')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jOK4j775Jy-S"
      },
      "source": [
        "(Time-permitting, a discussion of two-tailed vs one-tailed *p*-value tests would be informative here.)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eUO9cKo7Jy-S"
      },
      "source": [
        "**Exercises**\n",
        "\n",
        "1. What are the *p*-values associated with your weightlifting results from the three preceding exercises? \n",
        "2. With the standard $\\alpha = .05$, which of the three weightlifting results are \"statistically significant\"?\n",
        "\n",
        "**Spoiler alert**: Solutions below"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SmvS5AMBJy-T"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bsfF7aFkJy-T"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "og_a_F-vJy-T"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CWQrcJOYJy-T"
      },
      "source": [
        "**Solutions**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OGa9SFweJy-T"
      },
      "source": [
        "1a. This result is at the mean, which is also the median for a normal distribution; exactly half of the values are above as they are below. This corresponds to the highest possible $p$-value, $p=1$, because any value in the distribution is guaranteed to be above it or below it: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZQKATPPkJy-T",
        "outputId": "176a5538-3c62-4bca-a553-bfc0702aaa02"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ],
      "source": [
        "p_below = st.norm.cdf(0)\n",
        "p_below"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dmqPNWSqJy-U",
        "outputId": "436522df-3806-4525-fb53-85b0fec83721"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ],
      "source": [
        "p_above = 1-st.norm.cdf(0)\n",
        "p_above"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fn6BF8RbJy-U",
        "outputId": "0886653c-29c8-4230-9a0b-5881a6ea1053"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "execution_count": 74,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "p_below + p_above"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RWdGMzQ0Jy-U"
      },
      "source": [
        "More generally: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BlWSYNYEJy-U"
      },
      "outputs": [],
      "source": [
        "def p_from_z(my_z):\n",
        "    return 2 * st.norm.cdf(-abs(my_z))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V-wR64UTJy-V",
        "outputId": "67bda0f1-460b-4aaf-8b99-79c9a7286ed6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ],
      "source": [
        "p_from_z(0)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jXZzO-nUJy-V"
      },
      "source": [
        "1b. The probability of a value being below $z = -2$ is:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kmVVA_Z-Jy-V",
        "outputId": "08ed9f2a-3886-4ab5-9667-e39469770704"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.022750131948179195"
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ],
      "source": [
        "p_below = st.norm.cdf(-2)\n",
        "p_below"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uqHYBMw9Jy-V"
      },
      "source": [
        "...and the probability of a value being above $z=2$ is the same: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UFk8qbOYJy-V",
        "outputId": "1513a36d-819c-43d5-ed69-8544d919e50c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.02275013194817921"
            ]
          },
          "metadata": {},
          "execution_count": 99
        }
      ],
      "source": [
        "p_above = 1-st.norm.cdf(2)\n",
        "p_above"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LYa0XOgUJy-V"
      },
      "source": [
        "Therefore, the *p*-value -- the probability that a value is below $z=-2$ or above $z=2$ -- is:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qur84VgxJy-W",
        "outputId": "154dc366-4b5b-4b10-a4a7-df2bed19e1ca"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0455002638963584"
            ]
          },
          "metadata": {},
          "execution_count": 100
        }
      ],
      "source": [
        "p_below + p_above"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3RJV4nIJJy-W",
        "outputId": "baf2f47e-d548-4fe7-d117-7d32c0f84a06"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.04550026389635839"
            ]
          },
          "metadata": {},
          "execution_count": 101
        }
      ],
      "source": [
        "p_from_z(2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xwimaURKJy-W"
      },
      "source": [
        "1c. Following the same calculations as we did for 1b, the *p*-value for an observation 4 standard deviations away from the mean is: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S8NL5ziVJy-W",
        "outputId": "8952b7e3-2f51-4c83-bb27-cea1f77be21b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6.334248366623973e-05"
            ]
          },
          "metadata": {},
          "execution_count": 102
        }
      ],
      "source": [
        "p_from_z(4)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ePMcdC6AJy-W"
      },
      "source": [
        "...which is about 0.0000633: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "blFPCwJLJy-W",
        "outputId": "4c2c47ba-8060-4012-e7f9-101e24fd94ef"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6.33e-05"
            ]
          },
          "metadata": {},
          "execution_count": 103
        }
      ],
      "source": [
        "0.0000633"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5DcLWbVQJy-X"
      },
      "source": [
        "(Incidentally, very small *p* values are often reported as **negative log *P*** values as these are much easier to read...)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vpmwsw5OJy-X",
        "outputId": "3a8cc993-01c9-4c13-bf18-40e0d370f484"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4.198596289982645"
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ],
      "source": [
        "-np.log10(6.33e-05)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xzmOYl6xJy-X"
      },
      "source": [
        "2. The absolute value of the *z*-score for your snatch as well as your combined score is greater than 1.96 so they're both \"statistically significant\". Your performance on the clean and jerk could not have been less significant! "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HA3mbmo4Jy-X"
      },
      "source": [
        "### Comparing Means with *t*-tests"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OBARGrHjJy-X"
      },
      "source": [
        "Where *z*-scores apply to *individual values* only, *t*-tests enables us to compare (the mean of) a sample of *multiple values* to a reference mean."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FFS2GmrxJy-X"
      },
      "source": [
        "#### Student's Single-Sample *t*-test"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OEkXJ94nJy-X"
      },
      "source": [
        "Named after William Sealy Gosset, an Oxford-trained scientist and mathematician, who became a stout yield statistician for Guinness in Dublin (from 1899 to his fatal heart attack in 1937 shortly after being promoted to head brewer). Alongside sabbaticals in Karl Pearson's UCL Biometric Laboratory, Gosset published under the pseudonym Student (including on the *t*-test, starting in 1908) as it was against Guinness policy to publish."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ShlPrRtVJy-X"
      },
      "source": [
        "Recalling the formula for calculating a *z*-score: \n",
        "$$ z = \\frac{x_i-\\mu}{\\sigma} $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BoXBaK4WJy-Y"
      },
      "source": [
        "The **single-sample *t*-test** is a variation on the theme and is defined by: \n",
        "$$ t = \\frac{\\bar{x} - \\mu_0}{s_{\\bar{x}}} $$\n",
        "Where: \n",
        "* $\\bar{x}$ is the sample mean\n",
        "* $\\mu_0$ is a reference mean, e.g., known population mean or \"null hypothesis\" mean\n",
        "* $s_{\\bar{x}}$ is the sample standard error"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lqnCyHq6Jy-Y"
      },
      "source": [
        "Let's say you're the head brewer at Guinness. Your baseline brewing process yields 50L of stout. Using a new genetically-modified yeast, you obtain the following yields (all in liters) in four separate experiments: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2Lo8ozG5Jy-Y"
      },
      "outputs": [],
      "source": [
        "x = [48, 50, 54, 60]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oov4H2IvJy-Y"
      },
      "source": [
        "We can obtain the *t*-statistic for this sample as follows: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JR_0S3KyJy-Y",
        "outputId": "3cd69091-3a96-456d-e9f8-22e4a641d8de"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "53.0"
            ]
          },
          "execution_count": 85,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "xbar = np.mean(x)\n",
        "xbar"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2OFpbkOlJy-Y",
        "outputId": "450b13e6-5835-48c6-fb07-ec5db7988a9d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "2.6457513110645907"
            ]
          },
          "execution_count": 86,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "sx = st.sem(x)\n",
        "sx"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YSX1KZ2nJy-Y",
        "outputId": "bce2a1e9-c29b-4803-d0d0-ebb1e26f6973"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1.1338934190276817"
            ]
          },
          "execution_count": 87,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "t = (xbar-50)/sx\n",
        "t"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1KAvQMTUJy-Z"
      },
      "source": [
        "We can convert the *t*-value into a *p*-value using Student's *t*-distribution (similar to the normal *z*-distribution, but varies based on number of data points in sample; see [here](https://en.wikipedia.org/wiki/Student%27s_t-distribution) for more detail):"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yqled1DnJy-Z"
      },
      "outputs": [],
      "source": [
        "def p_from_t(my_t, my_n):\n",
        "    return 2 * st.t.cdf(-abs(my_t), my_n-1) # 2nd arg to t.cdf() is \"degrees of freedom\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b_l4p5YwJy-Z",
        "outputId": "5c04fa3b-f6ca-4e15-c85c-1b5929b28a2e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.3392540508564543"
            ]
          },
          "execution_count": 89,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "p_from_t(t, len(x))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x0BPjLnwJy-Z"
      },
      "source": [
        "(An illustration of **degrees of freedom**: If we know the mean of the array `x`, three of its four values can vary freely. That is, if we know three of the values in the array, the fourth has no \"freedom\"; it must be a specific value. Thus, the most common situation with statistical tests is that we have *n*-1 degrees of freedom.)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z4-b2kfJJy-Z"
      },
      "source": [
        "For everyday usage, however, we can rely on the SciPy `ttest_1samp()` method: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZhHgjupDJy-Z",
        "outputId": "fd0301e2-ffbe-4b09-a930-85c0284cce95"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Ttest_1sampResult(statistic=1.1338934190276817, pvalue=0.3392540508564543)"
            ]
          },
          "execution_count": 90,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "st.ttest_1samp(x, 50)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7yB8zKkOJy-a"
      },
      "source": [
        "#### Welch's Independent *t*-test"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LHhP5rBJJy-a"
      },
      "source": [
        "In ordinary circumstances, if we have two samples whose means we'd like to compare, we use an **independent *t*-test**. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "43W0pLTKJy-a"
      },
      "outputs": [],
      "source": [
        "penguins = sns.load_dataset('penguins').dropna() # some rows are missing data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uzhbtPXzJy-a",
        "outputId": "0f934f6d-1940-48c2-e6f1-8abbdd28db29"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>species</th>\n",
              "      <th>island</th>\n",
              "      <th>bill_length_mm</th>\n",
              "      <th>bill_depth_mm</th>\n",
              "      <th>flipper_length_mm</th>\n",
              "      <th>body_mass_g</th>\n",
              "      <th>sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>39.1</td>\n",
              "      <td>18.7</td>\n",
              "      <td>181.0</td>\n",
              "      <td>3750.0</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>39.5</td>\n",
              "      <td>17.4</td>\n",
              "      <td>186.0</td>\n",
              "      <td>3800.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>40.3</td>\n",
              "      <td>18.0</td>\n",
              "      <td>195.0</td>\n",
              "      <td>3250.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>36.7</td>\n",
              "      <td>19.3</td>\n",
              "      <td>193.0</td>\n",
              "      <td>3450.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>39.3</td>\n",
              "      <td>20.6</td>\n",
              "      <td>190.0</td>\n",
              "      <td>3650.0</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>338</th>\n",
              "      <td>Gentoo</td>\n",
              "      <td>Biscoe</td>\n",
              "      <td>47.2</td>\n",
              "      <td>13.7</td>\n",
              "      <td>214.0</td>\n",
              "      <td>4925.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>340</th>\n",
              "      <td>Gentoo</td>\n",
              "      <td>Biscoe</td>\n",
              "      <td>46.8</td>\n",
              "      <td>14.3</td>\n",
              "      <td>215.0</td>\n",
              "      <td>4850.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>341</th>\n",
              "      <td>Gentoo</td>\n",
              "      <td>Biscoe</td>\n",
              "      <td>50.4</td>\n",
              "      <td>15.7</td>\n",
              "      <td>222.0</td>\n",
              "      <td>5750.0</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>342</th>\n",
              "      <td>Gentoo</td>\n",
              "      <td>Biscoe</td>\n",
              "      <td>45.2</td>\n",
              "      <td>14.8</td>\n",
              "      <td>212.0</td>\n",
              "      <td>5200.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>343</th>\n",
              "      <td>Gentoo</td>\n",
              "      <td>Biscoe</td>\n",
              "      <td>49.9</td>\n",
              "      <td>16.1</td>\n",
              "      <td>213.0</td>\n",
              "      <td>5400.0</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>333 rows × 7 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "    species     island  bill_length_mm  ...  flipper_length_mm  body_mass_g     sex\n",
              "0    Adelie  Torgersen            39.1  ...              181.0       3750.0    Male\n",
              "1    Adelie  Torgersen            39.5  ...              186.0       3800.0  Female\n",
              "2    Adelie  Torgersen            40.3  ...              195.0       3250.0  Female\n",
              "4    Adelie  Torgersen            36.7  ...              193.0       3450.0  Female\n",
              "5    Adelie  Torgersen            39.3  ...              190.0       3650.0    Male\n",
              "..      ...        ...             ...  ...                ...          ...     ...\n",
              "338  Gentoo     Biscoe            47.2  ...              214.0       4925.0  Female\n",
              "340  Gentoo     Biscoe            46.8  ...              215.0       4850.0  Female\n",
              "341  Gentoo     Biscoe            50.4  ...              222.0       5750.0    Male\n",
              "342  Gentoo     Biscoe            45.2  ...              212.0       5200.0  Female\n",
              "343  Gentoo     Biscoe            49.9  ...              213.0       5400.0    Male\n",
              "\n",
              "[333 rows x 7 columns]"
            ]
          },
          "execution_count": 92,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "penguins"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QiN2SlJPJy-a",
        "outputId": "d2d4b52a-f112-453d-a5a3-339f232e70ab"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(array(['Adelie', 'Chinstrap', 'Gentoo'], dtype=object),\n",
              " array([146,  68, 119]))"
            ]
          },
          "execution_count": 93,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.unique(penguins.species, return_counts=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oYNbPQ6aJy-a"
      },
      "outputs": [],
      "source": [
        "adelie = penguins[penguins.species == 'Adelie']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "izX0Q8CXJy-b",
        "outputId": "85b2ccc9-7086-4bae-97ff-074f9777716b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>species</th>\n",
              "      <th>island</th>\n",
              "      <th>bill_length_mm</th>\n",
              "      <th>bill_depth_mm</th>\n",
              "      <th>flipper_length_mm</th>\n",
              "      <th>body_mass_g</th>\n",
              "      <th>sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>39.1</td>\n",
              "      <td>18.7</td>\n",
              "      <td>181.0</td>\n",
              "      <td>3750.0</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>39.5</td>\n",
              "      <td>17.4</td>\n",
              "      <td>186.0</td>\n",
              "      <td>3800.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>40.3</td>\n",
              "      <td>18.0</td>\n",
              "      <td>195.0</td>\n",
              "      <td>3250.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>36.7</td>\n",
              "      <td>19.3</td>\n",
              "      <td>193.0</td>\n",
              "      <td>3450.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>39.3</td>\n",
              "      <td>20.6</td>\n",
              "      <td>190.0</td>\n",
              "      <td>3650.0</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Dream</td>\n",
              "      <td>36.6</td>\n",
              "      <td>18.4</td>\n",
              "      <td>184.0</td>\n",
              "      <td>3475.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>148</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Dream</td>\n",
              "      <td>36.0</td>\n",
              "      <td>17.8</td>\n",
              "      <td>195.0</td>\n",
              "      <td>3450.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Dream</td>\n",
              "      <td>37.8</td>\n",
              "      <td>18.1</td>\n",
              "      <td>193.0</td>\n",
              "      <td>3750.0</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>150</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Dream</td>\n",
              "      <td>36.0</td>\n",
              "      <td>17.1</td>\n",
              "      <td>187.0</td>\n",
              "      <td>3700.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>151</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Dream</td>\n",
              "      <td>41.5</td>\n",
              "      <td>18.5</td>\n",
              "      <td>201.0</td>\n",
              "      <td>4000.0</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>146 rows × 7 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "    species     island  bill_length_mm  ...  flipper_length_mm  body_mass_g     sex\n",
              "0    Adelie  Torgersen            39.1  ...              181.0       3750.0    Male\n",
              "1    Adelie  Torgersen            39.5  ...              186.0       3800.0  Female\n",
              "2    Adelie  Torgersen            40.3  ...              195.0       3250.0  Female\n",
              "4    Adelie  Torgersen            36.7  ...              193.0       3450.0  Female\n",
              "5    Adelie  Torgersen            39.3  ...              190.0       3650.0    Male\n",
              "..      ...        ...             ...  ...                ...          ...     ...\n",
              "147  Adelie      Dream            36.6  ...              184.0       3475.0  Female\n",
              "148  Adelie      Dream            36.0  ...              195.0       3450.0  Female\n",
              "149  Adelie      Dream            37.8  ...              193.0       3750.0    Male\n",
              "150  Adelie      Dream            36.0  ...              187.0       3700.0  Female\n",
              "151  Adelie      Dream            41.5  ...              201.0       4000.0    Male\n",
              "\n",
              "[146 rows x 7 columns]"
            ]
          },
          "execution_count": 95,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "adelie"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nO8GBeloJy-b",
        "outputId": "658b29bd-e9ca-4285-b622-227da698adac"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(array(['Biscoe', 'Dream', 'Torgersen'], dtype=object), array([44, 55, 47]))"
            ]
          },
          "execution_count": 96,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.unique(adelie.island, return_counts=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7OYSleCKJy-b",
        "outputId": "5af65b06-004d-4a7c-8490-2a2d3f55f3e8"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(array(['Female', 'Male'], dtype=object), array([73, 73]))"
            ]
          },
          "execution_count": 97,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.unique(adelie.sex, return_counts=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lsOZu9s9Jy-b",
        "outputId": "ae76828e-1a4b-402f-cdf4-d9778fecf327"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "_ = sns.boxplot(x='island', y='body_mass_g', hue='sex', data=adelie)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2VaIivkrJy-b"
      },
      "source": [
        "Mass doesn't appear to vary by island, so we can feel comfortable grouping the data together by island. Weight does, however, appear to vary by sex so let's take a closer look: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kx904jk5Jy-b",
        "outputId": "df57b926-9265-4c68-c758-0155253f54a7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([3.8  , 3.25 , 3.45 , 3.625, 3.2  , 3.7  , 3.45 , 3.325, 3.4  ,\n",
              "       3.8  , 3.8  , 3.2  , 3.15 , 3.25 , 3.3  , 3.325, 3.55 , 3.3  ,\n",
              "       3.15 , 3.1  , 3.   , 3.45 , 3.5  , 3.45 , 2.9  , 3.55 , 2.85 ,\n",
              "       3.15 , 3.6  , 2.85 , 3.35 , 3.05 , 3.6  , 3.55 , 3.7  , 3.7  ,\n",
              "       3.55 , 3.2  , 3.8  , 3.35 , 3.5  , 3.6  , 3.55 , 3.4  , 3.3  ,\n",
              "       3.7  , 2.9  , 3.725, 3.075, 2.925, 3.75 , 3.175, 3.825, 3.2  ,\n",
              "       3.9  , 2.9  , 3.35 , 3.15 , 3.45 , 3.05 , 3.275, 3.05 , 3.325,\n",
              "       3.5  , 3.425, 3.175, 3.4  , 3.4  , 3.05 , 3.   , 3.475, 3.45 ,\n",
              "       3.7  ])"
            ]
          },
          "execution_count": 99,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "f = adelie[adelie.sex == 'Female']['body_mass_g'].to_numpy()/1000\n",
        "f"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s_geKklTJy-c",
        "outputId": "e11f2dec-f9a1-4756-c142-a7c78abce6b5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([3.75 , 3.65 , 4.675, 3.8  , 4.4  , 4.5  , 4.2  , 3.6  , 3.95 ,\n",
              "       3.8  , 3.55 , 3.95 , 3.9  , 3.9  , 4.15 , 3.95 , 4.65 , 3.9  ,\n",
              "       4.4  , 4.6  , 3.425, 4.15 , 4.3  , 4.05 , 3.7  , 3.8  , 3.75 ,\n",
              "       4.4  , 4.05 , 3.95 , 4.1  , 4.45 , 3.9  , 4.15 , 4.25 , 3.9  ,\n",
              "       4.   , 4.7  , 4.2  , 3.55 , 3.8  , 3.95 , 4.3  , 4.45 , 4.3  ,\n",
              "       4.35 , 4.1  , 4.725, 4.25 , 3.55 , 3.9  , 4.775, 4.6  , 4.275,\n",
              "       4.075, 3.775, 3.325, 3.5  , 3.875, 4.   , 4.3  , 4.   , 3.5  ,\n",
              "       4.475, 3.9  , 3.975, 4.25 , 3.475, 3.725, 3.65 , 4.25 , 3.75 ,\n",
              "       4.   ])"
            ]
          },
          "execution_count": 100,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "m = adelie[adelie.sex == 'Male']['body_mass_g'].to_numpy()/1000\n",
        "m"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XfpowzzfJy-c",
        "outputId": "9083157f-966e-45b7-8824-191d22104322"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "3.368835616438356"
            ]
          },
          "execution_count": 101,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "fbar = f.mean()\n",
        "fbar"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tMzJ6hpTJy-c",
        "outputId": "2acd0a87-0081-4421-b1da-163665756912"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "4.043493150684932"
            ]
          },
          "execution_count": 102,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "mbar = m.mean()\n",
        "mbar"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8y2BYap9Jy-c"
      },
      "source": [
        "To quantify whether males weigh significantly more than females, we can use the **Welch *t*-test**, devised by the 20th c. British statistician Bernard Lewis Welch:\n",
        "$$ t = \\frac{\\bar{x} - \\bar{y}}{\\sqrt{\\frac{s^2_x}{n_x} + \\frac{s^2_y}{n_y}}} $$\n",
        "Where: \n",
        "* $\\bar{x}$ and $\\bar{y}$ are the sample means\n",
        "* $s^2_x$ and $s^2_y$ are the sample variances\n",
        "* $n_x$ and $n_y$ are the sample sizes"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8W_RnYsCJy-d"
      },
      "source": [
        "**N.B.**: Student's independent *t*-test is markedly more popular than Welch's, but Student's assumes equal population variances (i.e., $\\sigma^2_x \\approx \\sigma^2_y$), making it less robust. In case you're curious, Student's formula is the same as Welch's, except that it uses a pooled variance $s^2_p$ in place of individual sample variances ($s^2_x$ and $s^2_y$). You can read more about it [here](https://en.wikipedia.org/wiki/Student%27s_t-test#Independent_two-sample_t-test)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cl3g6CmrJy-d"
      },
      "outputs": [],
      "source": [
        "sf = f.var(ddof=1)\n",
        "sm = m.var(ddof=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qCThyw6ZJy-d"
      },
      "outputs": [],
      "source": [
        "nf = f.size\n",
        "nm = m.size"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7oApFUC_Jy-d",
        "outputId": "154b5c0c-6754-4bb7-b6a2-55a2ddc80341"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "-13.126285923485879"
            ]
          },
          "execution_count": 105,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "t = (fbar-mbar)/(sf/nf + sm/nm)**(1/2)\n",
        "t"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "04QiVOYcJy-d"
      },
      "source": [
        "Degrees of freedom for calculating the *p*-value are estimated using the [Welch–Satterthwaite equation](https://en.wikipedia.org/wiki/Welch–Satterthwaite_equation), which we won't detail but is defined as: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GXyapE2pJy-d"
      },
      "outputs": [],
      "source": [
        "def ws_eqn(sx, sy, nx, ny):\n",
        "    return (sx / nx + sy / ny)**2 / (sx**2 / (nx**2 * (nx - 1)) + sy**2 / (ny**2 * (ny - 1)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bhiKHnxXJy-d",
        "outputId": "c51859a9-03f6-491e-b0e6-f21ff98a3c0b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "135.69357893530386"
            ]
          },
          "execution_count": 107,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df = ws_eqn(sf, sm, nf, nm)\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uA-751AVJy-e",
        "outputId": "3e84ac77-d6d6-45be-c7ea-1f1055b51404"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "6.402319748031518e-26"
            ]
          },
          "execution_count": 108,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "p = 2 * st.t.cdf(-abs(t), df) # or p_from_t(t, df+1)\n",
        "p"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yKrUZU9oSylp",
        "outputId": "51f32cf6-0bf6-4752-ba4a-eb6f198a88a2"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "6.402319748031518e-26"
            ]
          },
          "execution_count": 109,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "p_from_t(t, df+1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3Ug3l4vNJy-e",
        "outputId": "4fd21b23-f95a-4239-c766-63b45814acea"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "25.193662639886046"
            ]
          },
          "execution_count": 110,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "-np.log10(p)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fj1klL8RJy-e",
        "outputId": "109d5c46-05d0-4264-ad4d-2628cf7707b9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Ttest_indResult(statistic=-13.126285923485879, pvalue=6.402319748031518e-26)"
            ]
          },
          "execution_count": 111,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "st.ttest_ind(f, m, equal_var=False) "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mz_5pa7WJy-e"
      },
      "source": [
        "#### Student's Paired *t*-test"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kaomPLqyJy-e"
      },
      "source": [
        "Occasionally, we have two vectors where each element in vector *x* has a corresponding element in vector *y*. \n",
        "\n",
        "For example, we could run an experiment where Alzheimer's disease patients receive a drug on one day (experimental condition) and a sugar pill placebo (control condition) on another day. We can then measure the patients' forgetfulness on both days to test whether the drug has a significant impact on memory.\n",
        "\n",
        "For a given sample size, such a paired *t*-test is more powerful relative to an unpaired (independent) *t*-test because the variance of *x* is directly related to the variance in *y*: A severe Alzheimer's patient will tend to be relatively forgetful on both days, while a mild Alzheimer's patient will tend to be relatively unforgetful on both days. With paired samples, we capture this power by comparing the *difference* between *x* and *y*, e.g., the difference in forgetfulness for a given patient when given the drug relative to when given the sugar pill.\n",
        "\n",
        "In contrast, consider the penguin dataset, wherein we wouldn't be able to obviously pair a given male penguin with a correponding female penguin. Or consider a situation where we provide a drug to one set of Alzheimer's patients while we provide a placebo to an entire different (an independent) group of patients. Indeed, with an independent *t*-test we could even have different sample sizes in the two groups whereas this is impossible with a paired *t*-test. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mRknH0rPJy-e"
      },
      "source": [
        "Here's an example: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I5OLpqPvJy-f",
        "outputId": "df5f319c-4d95-4bc9-f56b-e9c45a7328d2"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>id</th>\n",
              "      <th>diet</th>\n",
              "      <th>pulse</th>\n",
              "      <th>time</th>\n",
              "      <th>kind</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>low fat</td>\n",
              "      <td>85</td>\n",
              "      <td>1 min</td>\n",
              "      <td>rest</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>low fat</td>\n",
              "      <td>85</td>\n",
              "      <td>15 min</td>\n",
              "      <td>rest</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>low fat</td>\n",
              "      <td>88</td>\n",
              "      <td>30 min</td>\n",
              "      <td>rest</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>low fat</td>\n",
              "      <td>90</td>\n",
              "      <td>1 min</td>\n",
              "      <td>rest</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>low fat</td>\n",
              "      <td>92</td>\n",
              "      <td>15 min</td>\n",
              "      <td>rest</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>85</th>\n",
              "      <td>85</td>\n",
              "      <td>29</td>\n",
              "      <td>no fat</td>\n",
              "      <td>135</td>\n",
              "      <td>15 min</td>\n",
              "      <td>running</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86</th>\n",
              "      <td>86</td>\n",
              "      <td>29</td>\n",
              "      <td>no fat</td>\n",
              "      <td>130</td>\n",
              "      <td>30 min</td>\n",
              "      <td>running</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>87</th>\n",
              "      <td>87</td>\n",
              "      <td>30</td>\n",
              "      <td>no fat</td>\n",
              "      <td>99</td>\n",
              "      <td>1 min</td>\n",
              "      <td>running</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>88</th>\n",
              "      <td>88</td>\n",
              "      <td>30</td>\n",
              "      <td>no fat</td>\n",
              "      <td>111</td>\n",
              "      <td>15 min</td>\n",
              "      <td>running</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89</th>\n",
              "      <td>89</td>\n",
              "      <td>30</td>\n",
              "      <td>no fat</td>\n",
              "      <td>150</td>\n",
              "      <td>30 min</td>\n",
              "      <td>running</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>90 rows × 6 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "    Unnamed: 0  id     diet  pulse    time     kind\n",
              "0            0   1  low fat     85   1 min     rest\n",
              "1            1   1  low fat     85  15 min     rest\n",
              "2            2   1  low fat     88  30 min     rest\n",
              "3            3   2  low fat     90   1 min     rest\n",
              "4            4   2  low fat     92  15 min     rest\n",
              "..         ...  ..      ...    ...     ...      ...\n",
              "85          85  29   no fat    135  15 min  running\n",
              "86          86  29   no fat    130  30 min  running\n",
              "87          87  30   no fat     99   1 min  running\n",
              "88          88  30   no fat    111  15 min  running\n",
              "89          89  30   no fat    150  30 min  running\n",
              "\n",
              "[90 rows x 6 columns]"
            ]
          },
          "execution_count": 112,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "exercise = sns.load_dataset('exercise')\n",
        "exercise"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NYi9P-nIJy-f"
      },
      "source": [
        "There are 30 people in the dataset, with their pulse taken at three different time points in an experiment (i.e, after one, 15, and 30 minutes). Ten people were assigned to each of three activity groups: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8ZmmIMPEJy-f",
        "outputId": "40048b38-22fd-4096-851c-d5ca45329b13"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(array(['rest', 'running', 'walking'], dtype=object), array([30, 30, 30]))"
            ]
          },
          "execution_count": 113,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.unique(exercise.kind, return_counts=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "49PjJ7U2Jy-g"
      },
      "source": [
        "Within each of those activity groups, half of the participants are on a low-fat diet while the other half are on a no-fat diet: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0L3Ez96QJy-g",
        "outputId": "ad7d5fc3-d4f9-4971-d3aa-65d23180ca5b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(array(['low fat', 'no fat'], dtype=object), array([45, 45]))"
            ]
          },
          "execution_count": 114,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.unique(exercise.diet, return_counts=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CLMGo8KNJy-g"
      },
      "source": [
        "For simplicity, let's only consider one of the six experimental groups, say the walking, no-fat dieters: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i6a8K8bwJy-g",
        "outputId": "e65e0745-0880-415e-9242-9dcc2f264628"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>id</th>\n",
              "      <th>diet</th>\n",
              "      <th>pulse</th>\n",
              "      <th>time</th>\n",
              "      <th>kind</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>45</td>\n",
              "      <td>16</td>\n",
              "      <td>no fat</td>\n",
              "      <td>84</td>\n",
              "      <td>1 min</td>\n",
              "      <td>walking</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>46</td>\n",
              "      <td>16</td>\n",
              "      <td>no fat</td>\n",
              "      <td>86</td>\n",
              "      <td>15 min</td>\n",
              "      <td>walking</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>47</td>\n",
              "      <td>16</td>\n",
              "      <td>no fat</td>\n",
              "      <td>89</td>\n",
              "      <td>30 min</td>\n",
              "      <td>walking</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>48</td>\n",
              "      <td>17</td>\n",
              "      <td>no fat</td>\n",
              "      <td>103</td>\n",
              "      <td>1 min</td>\n",
              "      <td>walking</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>49</td>\n",
              "      <td>17</td>\n",
              "      <td>no fat</td>\n",
              "      <td>109</td>\n",
              "      <td>15 min</td>\n",
              "      <td>walking</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>50</td>\n",
              "      <td>17</td>\n",
              "      <td>no fat</td>\n",
              "      <td>90</td>\n",
              "      <td>30 min</td>\n",
              "      <td>walking</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>51</td>\n",
              "      <td>18</td>\n",
              "      <td>no fat</td>\n",
              "      <td>92</td>\n",
              "      <td>1 min</td>\n",
              "      <td>walking</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>52</td>\n",
              "      <td>18</td>\n",
              "      <td>no fat</td>\n",
              "      <td>96</td>\n",
              "      <td>15 min</td>\n",
              "      <td>walking</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>53</td>\n",
              "      <td>18</td>\n",
              "      <td>no fat</td>\n",
              "      <td>101</td>\n",
              "      <td>30 min</td>\n",
              "      <td>walking</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>54</td>\n",
              "      <td>19</td>\n",
              "      <td>no fat</td>\n",
              "      <td>97</td>\n",
              "      <td>1 min</td>\n",
              "      <td>walking</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>55</td>\n",
              "      <td>19</td>\n",
              "      <td>no fat</td>\n",
              "      <td>98</td>\n",
              "      <td>15 min</td>\n",
              "      <td>walking</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>56</td>\n",
              "      <td>19</td>\n",
              "      <td>no fat</td>\n",
              "      <td>100</td>\n",
              "      <td>30 min</td>\n",
              "      <td>walking</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>57</td>\n",
              "      <td>20</td>\n",
              "      <td>no fat</td>\n",
              "      <td>102</td>\n",
              "      <td>1 min</td>\n",
              "      <td>walking</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>58</td>\n",
              "      <td>20</td>\n",
              "      <td>no fat</td>\n",
              "      <td>104</td>\n",
              "      <td>15 min</td>\n",
              "      <td>walking</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>59</td>\n",
              "      <td>20</td>\n",
              "      <td>no fat</td>\n",
              "      <td>103</td>\n",
              "      <td>30 min</td>\n",
              "      <td>walking</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    Unnamed: 0  id    diet  pulse    time     kind\n",
              "45          45  16  no fat     84   1 min  walking\n",
              "46          46  16  no fat     86  15 min  walking\n",
              "47          47  16  no fat     89  30 min  walking\n",
              "48          48  17  no fat    103   1 min  walking\n",
              "49          49  17  no fat    109  15 min  walking\n",
              "50          50  17  no fat     90  30 min  walking\n",
              "51          51  18  no fat     92   1 min  walking\n",
              "52          52  18  no fat     96  15 min  walking\n",
              "53          53  18  no fat    101  30 min  walking\n",
              "54          54  19  no fat     97   1 min  walking\n",
              "55          55  19  no fat     98  15 min  walking\n",
              "56          56  19  no fat    100  30 min  walking\n",
              "57          57  20  no fat    102   1 min  walking\n",
              "58          58  20  no fat    104  15 min  walking\n",
              "59          59  20  no fat    103  30 min  walking"
            ]
          },
          "execution_count": 115,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "walk_no = exercise[(exercise.diet == 'no fat') & (exercise.kind == 'walking')]\n",
        "walk_no"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wkNKuo-UJy-g"
      },
      "source": [
        "(Note how participant 16 has a relatively low heart rate at all three timepoints, whereas participant 20 has a relatively high heart rate at all three timepoints.)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8mJ_Bzz5Jy-g",
        "outputId": "001f48d7-1cf4-475a-c9d3-2fabead73e83"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "_ = sns.boxplot(x='time', y='pulse', data=walk_no)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u8IgFK6KJy-h",
        "outputId": "240ff222-3b76-4334-83ae-bd34fc8ff77c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 84, 103,  92,  97, 102])"
            ]
          },
          "execution_count": 117,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "min1 = walk_no[walk_no.time == '1 min']['pulse'].to_numpy()\n",
        "min1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o_LOW8VFJy-h",
        "outputId": "87420c4d-c6b7-489f-81be-a57ece3640a6"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "95.6"
            ]
          },
          "execution_count": 118,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "min1.mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9H8GdBZoJy-h",
        "outputId": "aa3d93ef-2abc-4c8f-e040-abdceb9bf1e0"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 86, 109,  96,  98, 104])"
            ]
          },
          "execution_count": 119,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "min15 = walk_no[walk_no.time == '15 min']['pulse'].to_numpy()\n",
        "min15"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D0QZlQl8Jy-h",
        "outputId": "f041cd4c-137b-4ff4-ddd2-1a3c7761de30"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "98.6"
            ]
          },
          "execution_count": 120,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "min15.mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rkCzRQnwJy-h",
        "outputId": "d0b02bcc-d703-4dfb-c72d-ad8dcedda1fb"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 89,  90, 101, 100, 103])"
            ]
          },
          "execution_count": 121,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "min30 = walk_no[walk_no.time == '30 min']['pulse'].to_numpy()\n",
        "min30"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yWmnohV5Jy-h",
        "outputId": "c8b7bca9-0ce7-402e-d765-7c7aee736307"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "96.6"
            ]
          },
          "execution_count": 122,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "min30.mean()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2IPyQq9iJy-i"
      },
      "source": [
        "(With paired samples, we can plot the values in a scatterplot, which wouldn't make any sense for independent samples, e.g.:)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rNPRuNaDJy-i",
        "outputId": "ed4f26a8-d232-4ed3-84bc-5f280a0da782"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.scatterplot(x=min1, y=min15)\n",
        "plt.title('Heart rate of no-fat dieters (beats per minute)')\n",
        "plt.xlabel('After 1 minute walking')\n",
        "_ = plt.ylabel('After 15 minutes walking')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7ah_p_eVJy-i"
      },
      "source": [
        "To assess whether the mean heart rate varies significantly after one minute of walking relative to after 15 minutes, we can use Student's **paired-sample** (a.k.a., **dependent**) *t*-test: \n",
        "$$ t = \\frac{\\bar{d} - \\mu_0}{s_\\bar{d}} $$ \n",
        "Where: \n",
        "* $d$ is a vector of the differences between paired samples $x$ and $y$\n",
        "* $\\bar{d}$ is the mean of the differences\n",
        "* $\\mu_0$ will typically be zero, meaning the null hypothesis is that there is no difference between $x$ and $y$\n",
        "* $s_\\bar{d}$ is the standard error of the differences"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5w618u07Jy-i"
      },
      "source": [
        "(Note how similar to single-sample *t*-test formula.)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GSaoJW5IJy-i",
        "outputId": "7d8f15bf-b182-434f-e01f-db3c4cc1c9d5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([2, 6, 4, 1, 2])"
            ]
          },
          "execution_count": 124,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "d = min15 - min1\n",
        "d"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "elsBVr9AJy-i",
        "outputId": "04e28316-5545-4ed0-b3d8-f961bbbe59df"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "3.0"
            ]
          },
          "execution_count": 125,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "dbar = d.mean()\n",
        "dbar"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yD8KOL3EJy-j",
        "outputId": "8c1fedc8-875a-4663-8bbc-9a7a90d5d716"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.8944271909999159"
            ]
          },
          "execution_count": 126,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "sd = st.sem(d)\n",
        "sd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uJglNA37Jy-j",
        "outputId": "3e4b1a7c-9b30-462a-a0a8-070f53a9fbda"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "3.3541019662496847"
            ]
          },
          "execution_count": 127,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "t = (dbar-0)/sd\n",
        "t"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6Mcq9LALJy-j",
        "outputId": "177698d7-92fe-4953-848e-14dbc4a3a97f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.02846020325433834"
            ]
          },
          "execution_count": 128,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "p_from_t(t, d.size)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7SZqWeDSJy-j",
        "outputId": "14b8234b-9751-4e11-dfcb-8e7ebf7a354d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Ttest_relResult(statistic=3.3541019662496847, pvalue=0.02846020325433834)"
            ]
          },
          "execution_count": 129,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "st.ttest_rel(min15, min1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oZy5OPUcJy-j"
      },
      "source": [
        "In contrast, if we were to put the same values into an independent *t*-test..."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Zxlb9MjJy-j",
        "outputId": "bea9e93c-1f55-4a57-8abc-28584150cdbd"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Ttest_indResult(statistic=0.5729114862838532, pvalue=0.5826164805627767)"
            ]
          },
          "execution_count": 130,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "st.ttest_ind(min15, min1, equal_var=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3Qq6CwH2Jy-k"
      },
      "source": [
        "#### Machine Learning Examples"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QKsOq0Q2Jy-k"
      },
      "source": [
        "* Single-sample: Does my stochastic model tend to be more accurate than an established benchmark? \n",
        "* Independent samples: Does my model have unwanted bias in it, e.g., do white men score higher than other demographic groups with HR model? \n",
        "* Paired samples: Is new TensorFlow.js model significantly faster? (paired by browser / device)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bVKNILucJy-k"
      },
      "source": [
        "**Exercises**\n",
        "1. You run four additional experiments with your GMO brewing yeast and now have the following eight stout yields: `[48, 50, 54, 60, 49, 55, 59, 62]`. What is the *t*-statistic and is it significantly different from the 50L-yielding baseline process? \n",
        "2. Does the flipper length of Adélie penguins from Dream island vary significantly by sex? \n",
        "2. Was the heart rate of low-fat dieters different after one minute of rest relative to after 15 minutes of rest? \n",
        "\n",
        "**Spoiler alert**: Solutions below"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "G4HjJ33AJy-k"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xDcxxEsGJy-k"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6HL_gZyZJy-k"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EBk3r0Q_Jy-k"
      },
      "source": [
        "**Solutions**\n",
        "1. The GMO yeast yields a mean of 54.6L, which is significantly more stout than the baseline process, *t*(7) = 2.45, $p < .05$."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h8K4hhf0Jy-l",
        "outputId": "a4d66128-4c04-4eaa-8318-d9c6c78b2b3d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Ttest_1sampResult(statistic=2.448085108904054, pvalue=0.0442312968303811)"
            ]
          },
          "execution_count": 131,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "st.ttest_1samp([48, 50, 54, 60, 49, 55, 59, 62], 50)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2uSTVC7PJy-l"
      },
      "source": [
        "2. On Dream island, the flippers of male Adélie penguins (191.9 mm) are significantly longer than those of females (187.9 mm), *t* = 2.4, *p* < .05."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wVvnWp-nJy-l",
        "outputId": "48eca2e6-b7d4-497d-ece6-bf78bc36e71c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "_ = sns.boxplot(x='island', y='flipper_length_mm', hue='sex', data=adelie)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6NQmdBuxJy-l"
      },
      "outputs": [],
      "source": [
        "f = adelie[(adelie.sex == 'Female') & (adelie.island == 'Dream')]['flipper_length_mm'].to_numpy()\n",
        "m = adelie[(adelie.sex == 'Male') & (adelie.island == 'Dream')]['flipper_length_mm'].to_numpy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "087RkPOgJy-l",
        "outputId": "0aaf40a0-0aff-41d4-fe78-143405602919"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "187.85185185185185"
            ]
          },
          "execution_count": 134,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "f.mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bTpJdjU-Jy-m",
        "outputId": "6a0220c5-0ce5-4694-c21d-d6eeb20caa2b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "191.92857142857142"
            ]
          },
          "execution_count": 135,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "m.mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gDK9V7pTJy-m",
        "outputId": "f5382a8f-30b3-42d5-e820-3ba45d9c13a2"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Ttest_indResult(statistic=-2.4460386199991864, pvalue=0.01789859961302419)"
            ]
          },
          "execution_count": 136,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "tp = st.ttest_ind(f, m, equal_var=False)\n",
        "tp"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3xPeCr7jJy-m",
        "outputId": "229db25d-a01f-48a5-cc6f-fd29fd88986e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.01789859961302419"
            ]
          },
          "execution_count": 137,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "tp.pvalue"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7sGchromJy-m"
      },
      "source": [
        "3. The heart rate of low-fat dieters did not change significantly after one minute of rest (88.6 bpm) relative to after 15 minutes of rest (89.6 bpm), *t*=2.2, *p* = .09."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZL0ZiOjaJy-n"
      },
      "outputs": [],
      "source": [
        "rest_lo = exercise[(exercise.diet == 'low fat') & (exercise.kind == 'rest')]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L6TswIXmcJjM",
        "outputId": "4a8ae12f-30ab-4f87-ae09-53282b430327"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "_ = sns.boxplot(x='time', y='pulse', data=rest_lo)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DrFCIU5oJy-n",
        "outputId": "044052c3-075e-41d1-afb0-4085a29d9ded"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "88.6"
            ]
          },
          "execution_count": 140,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "min1 = rest_lo[rest_lo.time == '1 min']['pulse'].to_numpy()\n",
        "min1.mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LKBkGXAeJy-n",
        "outputId": "452f871a-01e0-480c-8bb6-4e1f27161b91"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "89.6"
            ]
          },
          "execution_count": 141,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "min15 = rest_lo[rest_lo.time == '15 min']['pulse'].to_numpy()\n",
        "min15.mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H0s2me3RJy-n",
        "outputId": "2d4dd06e-2228-4a7b-8837-fada14c2c997"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Ttest_relResult(statistic=2.23606797749979, pvalue=0.08900934250008564)"
            ]
          },
          "execution_count": 142,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "st.ttest_rel(min15, min1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MkAeEk4PJy-n"
      },
      "source": [
        "### Confidence Intervals"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8IdBn7D6Jy-n"
      },
      "source": [
        "When examining sample means as we have been for the *t*-test, a useful statistical tool is the **confidence interval** (CI), which we for example often see associated with polling results when there's an upcoming election. CIs allow us to make statements such as \"there is a 95% chance that the population mean lies within this particular range of values\"."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Nk_XsypkJy-o"
      },
      "source": [
        "We can calculate a CI by rearranging the *z*-score formula: \n",
        "$$ \\text{C.I.} = \\bar{x} \\pm z \\frac{s}{\\sqrt{n}} $$\n",
        "Where: \n",
        "* $\\bar{x}$ is the sample mean\n",
        "* $s$ is the sample standard deviation\n",
        "* $n$ is the sample size\n",
        "* $z$ corresponds to a *z*-score threshold (e.g., the most common 95% CI is $z \\pm 1.960$; other popular ones are the 90% CI at $z \\pm 1.645$ and the 99% CI at $z \\pm 2.576$)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0FZRFc_tJy-o"
      },
      "source": [
        "For example, to find the 95% confidence interval for the true mean yield of our GMO yeast: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JoiW9cZmJy-o"
      },
      "outputs": [],
      "source": [
        "x = np.array([48, 50, 54, 60, 49, 55, 59, 62])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sF4Oxn-KJy-o"
      },
      "outputs": [],
      "source": [
        "xbar = x.mean()\n",
        "s = x.std()\n",
        "n = x.size"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZI7gS9CUJy-o"
      },
      "outputs": [],
      "source": [
        "z = 1.96"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ghR6ySR5Jy-o"
      },
      "outputs": [],
      "source": [
        "def CIerr_calc(my_z, my_s, my_n):\n",
        "    return my_z*(my_s/my_n**(1/2))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zUnONG0FJy-o"
      },
      "outputs": [],
      "source": [
        "CIerr = CIerr_calc(z, s, n)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wJy0oR0PhPe4",
        "outputId": "939fb006-30d6-4398-e447-9107d3529859"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "3.4637403013216796"
            ]
          },
          "execution_count": 148,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "CIerr"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eUgR-OumJy-o",
        "outputId": "78111d18-c4ac-4b2b-ee7b-50136e91287a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "58.08874030132168"
            ]
          },
          "execution_count": 149,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "xbar + CIerr"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dcSAZBArJy-p",
        "outputId": "a56b454f-6a83-43e5-f58e-48323d2284fa"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "51.16125969867832"
            ]
          },
          "execution_count": 150,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "xbar - CIerr"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9ILUj-4vJy-p"
      },
      "source": [
        "Therefore, there's a 95% chance that the true mean yield of our GMO yeast lies in the range of 51.2 to 58.1 liters. Since this CI doesn't overlap with the established baseline mean of 50L, this corresponds to stating that the GMO yield is significantly greater than the baseline where $\\alpha = .05$, as we already determined: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XzL2woRiJy-p",
        "outputId": "668d1369-0334-41e7-d874-c1e1d13f78e3"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig, ax = plt.subplots()\n",
        "plt.ylabel('Stout Yield (L)')\n",
        "plt.grid(axis='y')\n",
        "ax.errorbar(['GMO'], [xbar], [CIerr], fmt='o', color='green')\n",
        "_ = ax.axhline(50, color='orange')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VNhOA10fJy-p"
      },
      "source": [
        "Similarly, we can compare several sample means with CIs. Using our penguins again: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IRyeB9TQJy-p"
      },
      "outputs": [],
      "source": [
        "fCIerr = CIerr_calc(z, sf, nf)\n",
        "mCIerr = CIerr_calc(z, sm, nm)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b_xJOcVYJy-p",
        "outputId": "f674b792-f821-4a28-82fe-fd6f5a30e7e8"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig, ax = plt.subplots()\n",
        "plt.title('Adélie Penguins')\n",
        "plt.ylabel('Weight (kg)')\n",
        "plt.grid(axis='y')\n",
        "_ = ax.errorbar(['female', 'male'], [fbar, mbar], [fCIerr, mCIerr], \n",
        "                fmt='.', color='green')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xNBdDo13Jy-p"
      },
      "source": [
        "The CIs are nowhere near overlapping, corresponding to the extremely significant (-log*P* $\\approx 25$) difference in penguin weight."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "__UUzJKhJy-q"
      },
      "source": [
        "In contrast, the CIs for female penguins from the three islands..."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-I5QSiz1Jy-q"
      },
      "outputs": [],
      "source": [
        "t = adelie[(adelie.sex == 'Female') & (adelie.island == 'Torgersen')]['body_mass_g'].to_numpy()/1000\n",
        "b = adelie[(adelie.sex == 'Female') & (adelie.island == 'Biscoe')]['body_mass_g'].to_numpy()/1000\n",
        "d = adelie[(adelie.sex == 'Female') & (adelie.island == 'Dream')]['body_mass_g'].to_numpy()/1000"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bSl86d2CJy-q"
      },
      "outputs": [],
      "source": [
        "means = [t.mean(), b.mean(), d.mean()]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oUW9l3FeJy-q"
      },
      "outputs": [],
      "source": [
        "s_t, sb, sd = t.var(ddof=1), b.var(ddof=1), d.var(ddof=1) # s_t to disambiguate stats package"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "d6OLKRJGJy-q"
      },
      "outputs": [],
      "source": [
        "nt, nb, nd = t.size, b.size, d.size"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0JVMu-zmJy-q"
      },
      "outputs": [],
      "source": [
        "CIerrs = [CIerr_calc(z, s_t, nt), CIerr_calc(z, sb, nb), CIerr_calc(z, sd, nd)]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s3-yrx0IJy-q",
        "outputId": "70de4b2f-11e9-4397-cb2d-0fbd3bb3c371"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig, ax = plt.subplots()\n",
        "plt.title('Female Adélie Penguins')\n",
        "plt.ylabel('Weight (kg)')\n",
        "plt.grid(axis='y')\n",
        "_ = ax.errorbar(['Torgersen', 'Biscoe', 'Dream'], means, CIerrs, \n",
        "                fmt='o', color='green')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c_mv-Q3oJy-q"
      },
      "source": [
        "### ANOVA: Analysis of Variance"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y5I-yTOAJy-r"
      },
      "source": [
        "**Analysis of variance** (ANOVA) enables us to compare more than two samples (e.g., all three islands in the case of penguin weight) in a single statistical test."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0jAvOMmwJy-r"
      },
      "source": [
        "To apply ANOVA, we must make three assumptions: \n",
        "1. Independent samples\n",
        "2. Normally-distributed populations\n",
        "3. *Homoscedasticity*: Population standard deviations are equal"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2MdpZtTcJy-r"
      },
      "source": [
        "While not especially complicated under the hood (you can dig into the formulae [here](https://en.wikipedia.org/wiki/Analysis_of_variance#Logic)), ANOVA might be the least widely-applicable topic within *Intro to Stats* to ML so in the interest of time, we'll skip straight to the Python code: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rlCB3yAeJy-r",
        "outputId": "0bf2ce30-0414-4f5a-92de-7d6fe6fd0e90"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "F_onewayResult(statistic=0.22627752438542714, pvalue=0.7980777848719299)"
            ]
          },
          "execution_count": 160,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "st.f_oneway(t, b, d)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1iiTah2uJy-r"
      },
      "source": [
        "### Pearson Correlation Coefficient"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q-yMENfQJy-r"
      },
      "source": [
        "If we have two vectors of the same length, $x$ and $y$, where each element of $x$ is paired with the corresponding element of $y$, **covariance** provides a measure of how related the variables are to each other:\n",
        "$$ \\text{cov}(x, y) = \\frac{\\sum_{i=1}^n (x_i - \\bar{x})(y_i - \\bar{y}) }{n} $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K1OsRpDXJy-r"
      },
      "source": [
        "A drawback of covariance is that it confounds the relative scale of two variables with a measure of the variables' relatedness. **Correlation** builds on covariance and overcomes this drawback via rescaling, thereby measuring (linear) relatedness exclusively. Correlation is much more common because of this difference. \n",
        "\n",
        "The correlation coefficient (developed by Karl Pearson in the 20th c. though known in the 19th c.) is often denoted with $r$ or $\\rho$ and is defined by: \n",
        "$$ \\rho_{x,y} = \\frac{\\text{cov}(x,y)}{\\sigma_x \\sigma_y} $$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YZvTV6dAJy-r",
        "outputId": "ded82a5a-d55c-4c59-c2fa-3be9f2719850"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal_length</th>\n",
              "      <th>sepal_width</th>\n",
              "      <th>petal_length</th>\n",
              "      <th>petal_width</th>\n",
              "      <th>species</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>6.7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.2</td>\n",
              "      <td>2.3</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>6.3</td>\n",
              "      <td>2.5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.9</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>6.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>148</th>\n",
              "      <td>6.2</td>\n",
              "      <td>3.4</td>\n",
              "      <td>5.4</td>\n",
              "      <td>2.3</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149</th>\n",
              "      <td>5.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.1</td>\n",
              "      <td>1.8</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>150 rows × 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     sepal_length  sepal_width  petal_length  petal_width    species\n",
              "0             5.1          3.5           1.4          0.2     setosa\n",
              "1             4.9          3.0           1.4          0.2     setosa\n",
              "2             4.7          3.2           1.3          0.2     setosa\n",
              "3             4.6          3.1           1.5          0.2     setosa\n",
              "4             5.0          3.6           1.4          0.2     setosa\n",
              "..            ...          ...           ...          ...        ...\n",
              "145           6.7          3.0           5.2          2.3  virginica\n",
              "146           6.3          2.5           5.0          1.9  virginica\n",
              "147           6.5          3.0           5.2          2.0  virginica\n",
              "148           6.2          3.4           5.4          2.3  virginica\n",
              "149           5.9          3.0           5.1          1.8  virginica\n",
              "\n",
              "[150 rows x 5 columns]"
            ]
          },
          "execution_count": 161,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "iris = sns.load_dataset('iris')\n",
        "iris"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UnrJjhx0Jy-s"
      },
      "outputs": [],
      "source": [
        "x = iris.sepal_length\n",
        "y = iris.petal_length"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hPE0FcBTJy-s"
      },
      "outputs": [],
      "source": [
        "sns.set_style('darkgrid')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VVEf2DoBJy-s",
        "outputId": "7b6e1cff-f708-4864-c9d3-1ae58d32e6f0"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "_ = sns.scatterplot(x=x, y=y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-BMruFjYJy-s"
      },
      "outputs": [],
      "source": [
        "n = iris.sepal_width.size"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OWjlIrqxJy-s"
      },
      "outputs": [],
      "source": [
        "xbar, ybar = x.mean(), y.mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J1K3jIeoJy-s"
      },
      "outputs": [],
      "source": [
        "product = []\n",
        "for i in range(n):\n",
        "    product.append((x[i]-xbar)*(y[i]-ybar))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z6o2_0xqJy-s",
        "outputId": "9d716abe-0fdc-4413-b973-f16f804f1c55"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1.2658199999999995"
            ]
          },
          "execution_count": 168,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cov = sum(product)/n\n",
        "cov"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sNrADHruJy-t",
        "outputId": "6a7e4fcd-4d8a-49e3-d612-23749f725404"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.8717537758865828"
            ]
          },
          "execution_count": 169,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "r = cov/(np.std(x)*np.std(y))\n",
        "r"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TrfrcRSRJy-t"
      },
      "source": [
        "We reached this point in *Probability*. Now, as for how to determine a *p*-value, we first calculate the *t*-statistic...\n",
        "$$ t = r \\sqrt{\\frac{n-2}{1-r^2}} $$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jriXvRsfJy-t",
        "outputId": "708c58f0-872f-4605-a121-b45895a56769"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "21.64601934575973"
            ]
          },
          "execution_count": 170,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "t = r*((n-2)/(1-r**2))**(1/2)\n",
        "t"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0478RJCXJy-t"
      },
      "source": [
        "...which we can convert to a *p*-value as we've done several times above: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZyPsXHR3Jy-t",
        "outputId": "2ab162a1-0a3e-44b1-8735-96db55869f13"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1.0386674194500194e-47"
            ]
          },
          "execution_count": 171,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "p = p_from_t(t, n-1) \n",
        "p"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "duzLjTGmJy-t",
        "outputId": "bff821ad-ab17-472d-a3c2-a32705dfd363"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "46.98352349096027"
            ]
          },
          "execution_count": 172,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "-np.log10(p)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MKrnu6iZJy-u"
      },
      "source": [
        "This confirms that iris sepal length is extremely positively correlated with petal length."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mBNh5oBPJy-u"
      },
      "source": [
        "All of the above can be done in a single line with SciPy's `pearsonr()` method: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wsCA5H9zJy-u",
        "outputId": "c7a8614e-2da3-4a75-9d06-808db38595d7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(0.8717537758865831, 1.0386674194498099e-47)"
            ]
          },
          "execution_count": 173,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "st.pearsonr(x, y)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-_UNB98rJy-u"
      },
      "source": [
        "And, for reference, here's a correlation that is not significant ($r \\approx 0$): "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hM12XzeQJy-u",
        "outputId": "ee03b371-4e96-44fe-bb5d-36edfa95bd92"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "_ = sns.scatterplot(x=iris.sepal_length, y=iris.sepal_width)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G9ILTCGkJy-u",
        "outputId": "5ecee7b6-ef06-482a-d7e2-0035357cdf6c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(-0.11756978413300206, 0.15189826071144766)"
            ]
          },
          "execution_count": 175,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "st.pearsonr(iris.sepal_length, iris.sepal_width)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RpgrOtddJy-u"
      },
      "source": [
        "### The Coefficient of Determination"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QpwA6dZIJy-v"
      },
      "source": [
        "...also known as $r^2$, this is the proportion of variance in one variable explained by another. \n",
        "\n",
        "It can range from 0 to 1 and it is simply the square of the Pearson $r$:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Dq-99gWJy-v",
        "outputId": "47ec1717-af16-4c5f-82dd-c38c48eed8e3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.7599546457725144"
            ]
          },
          "execution_count": 176,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "rsq = r**2\n",
        "rsq"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2dsLJOK-Jy-v"
      },
      "source": [
        "In this case, it indicates that 76% of the variance in iris petal length can be explained by sepal length. (This is easier to understand where one variable could straightforwardly drive variation in the other; more on that in Segment 2.)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Dyt_nWhZJy-v"
      },
      "source": [
        "For comparison, only 1.4% of the variance in sepal width can be explained by sepal length: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jqoRP7sIJy-v",
        "outputId": "23bacd8d-8f58-4809-f6fb-6067cca9bb2b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.013822654141080705"
            ]
          },
          "execution_count": 177,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "st.pearsonr(iris.sepal_length, iris.sepal_width)[0]**2"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DAzNEPfMJy-v"
      },
      "source": [
        "### Correlation vs Causation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1mQAauNGJy-v"
      },
      "source": [
        "Correlation doesn't imply **causation** on its own. E.g., sepal length and petal length are extremely highly correlated, but this doesn't imply that sepal length causes petal length or vice versa. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eiRZEHl8Jy-v"
      },
      "source": [
        "There is a lot to causality and I recommend Judea Pearl's [*Causality*](http://bayes.cs.ucla.edu/BOOK-2K/), the classic technical text on the topic, if you're keen to explore this in depth. [*The Book of Why*](http://bayes.cs.ucla.edu/WHY/) is an exceptional lay alternative by the same author."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wh7hRf-NJy-w"
      },
      "source": [
        "In brief, three criteria are required for inferring causal relationships: \n",
        "\n",
        "1. **Covariation**: Two variables vary together (this criterion is satisfied by sepal and petal length)\n",
        "2. **Temporal precedence**: The affected variable must vary *after* the causal variable is varied. \n",
        "3. **Elimination of extraneous variables**: We must be sure no third variable is causing the variation. This can be tricky for data we obtained through observation alone, but easier when we can control the causal variable, e.g., with (ideally double-blind) randomized control trials. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PrZMto2nJy-w"
      },
      "source": [
        "Some examples of where we could infer causality from correlation in ML: \n",
        "* Additional neurons --> higher accuracy\n",
        "* Additional servers or RAM --> shorter inference time\n",
        "* Removal of pronouns --> less unwanted bias"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uuSMxo6uJy-w"
      },
      "source": [
        "### Correcting for Multiple Comparisons"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eVGXGnYTJy-w"
      },
      "source": [
        "A major issue with frequentist statistics is the issue of multiple comparisons:\n",
        "\n",
        "* If you perform 20 statistical tests where there is no real effect (i.e., the null hypothesis is true), then we would expect one of them to come up significant by chance alone (i.e., a *false positive* or *Type I error*).\n",
        "* If you perform a hundred tests in such a circumstance, then you should expect five false positives."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HjCTRjYWJy-w"
      },
      "source": [
        "The most straightforward, and indeed the most widely-used, solution is the **Bonferroni correction** (named after the 20th c. Italian mathematician Carlo Emilio Bonferroni). Assuming, we'd like an overall $\\alpha = .05$: \n",
        "\n",
        "* If we're planning on conducting ten tests ($m=10$), the significance threshold for each individual test is $\\frac{\\alpha}{m} = \\frac{.05}{10} = .005$\n",
        "* With 20 tests, it's $\\frac{\\alpha}{m} = \\frac{.05}{20} = .0025$\n",
        "* With 100 tests, it's $\\frac{\\alpha}{m} = \\frac{.05}{100} = .0005$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yzexynOdJy-w"
      },
      "source": [
        "(Other, less straightforward, approaches for adjusting $\\alpha$ for multiple comparisons exist. They're beyond our scope, but the major ones are listed under the *General methods of alpha adjustment for multiple comparisons* heading [here](https://en.wikipedia.org/wiki/Multiple_comparisons_problem#See_also).)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-x-fZ2_gJy-w"
      },
      "source": [
        "**Return to slides here.**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eCf6c3OSJy-w"
      },
      "source": [
        "## Segment 2: Regression"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RxcUrV5EJy-w"
      },
      "source": [
        "### Linear Least Squares for Fitting a Line to Points on a Cartesian Plane"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xt2m2UdYJy-x",
        "outputId": "0c58fa5a-c83b-4703-b43c-3dec95759537"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "_ = sns.scatterplot(x=x, y=y)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_JFRDiSHJy-x"
      },
      "source": [
        "Consider fitting a line to points on a **Cartesian plane** (2-D surface, with $y$-axis perpendicular to horizontal $x$-axis). To fit such a line, the only parameters we require are a $y$-intercept (say, $\\beta_0$) and a slope (say, $\\beta_1$): \n",
        "\n",
        "$$ y = \\beta_0 + \\beta_1 x $$\n",
        "\n",
        "This corresponds to the case where we have a single feature (a single predictor variable, $x$) in a regression model: \n",
        "\n",
        "$$ y = \\beta_0 + \\beta_1 x + \\epsilon $$\n",
        "\n",
        "The $\\epsilon$ term denotes **error**. For a given instance $i$, $\\epsilon_i$ is a measure of the difference between the true $y_i$ and the model's estimate, $\\hat{y}_i$. If the model predicts $y_i$ perfectly, then $\\epsilon_i = 0$. \n",
        "\n",
        "Our objective is to find the parameters $\\beta_0$ and $\\beta_1$ that minimize $\\epsilon$ across all the available data points. \n",
        "\n",
        "(Note that sepal length may not be an ideal example of a predictor variable, but these iris data are conveniently available at this stage of the notebook.)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9O_ZEib_Jy-x"
      },
      "source": [
        "In the case of a model with a single predictor $x$, there is a fairly straightforward **linear least squares** formula we can use to estimate $\\beta_1$: \n",
        "$$ \\hat{\\beta}_1 = \\frac{\\text{cov}(x,y)}{\\sigma^2_x} $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "USupBWpjJy-x"
      },
      "source": [
        "(We'll dig further into the \"least squares\" concept in the next section, for now we can think of it as minimizing the squared error $(\\hat{y}_i - y_i)^2$, which we isolate from $\\text{cov}(x,y)$ via division by $\\sigma^2_x$)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wE0qSO0LJy-x",
        "outputId": "447087e4-87fa-4999-c910-79457945f23d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1.2658199999999995"
            ]
          },
          "execution_count": 179,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cov"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lkpIm5ZeJy-y",
        "outputId": "256849d3-020c-4512-c967-5acdb958c73b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1.8584329782548403"
            ]
          },
          "execution_count": 180,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "beta1 = cov/np.var(x) \n",
        "beta1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HiC4PvwPJy-y"
      },
      "source": [
        "With $\\hat{\\beta}_1$ in hand, we can then rearrange the line equation ($y = \\beta_0 + \\beta_1 x$) to estimate $\\beta_0$:\n",
        "$$ \\hat{\\beta}_0 = \\bar{y} - \\hat{\\beta}_1 \\bar{x} $$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DMo0_f7DJy-y",
        "outputId": "2c068e05-6e21-4e45-ca36-55853adec26e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "-7.10144336960245"
            ]
          },
          "execution_count": 181,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "beta0 = ybar - beta1*xbar \n",
        "beta0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3j9GFB4OJy-y"
      },
      "outputs": [],
      "source": [
        "xline = np.linspace(4, 8, 1000)\n",
        "yline = beta0 + beta1*xline"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1x-YTnpHJy-y",
        "outputId": "64ea968c-2e93-4851-9dd3-856e53f0a1a1"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.scatterplot(x=x, y=y)\n",
        "_ = plt.plot(xline, yline, color='orange')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8XzKSflaJy-y"
      },
      "source": [
        "In regression model terms, if we were provided with an sepal length $x_i$ we could now use the parameter estimates $\\hat{\\beta}_0$ and $\\hat{\\beta}_1$ to predict the petal length of an iris:\n",
        "$$ \\hat{y}_i = \\hat{\\beta}_0 + \\hat{\\beta}_1 x_i $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lFOcI346Jy-z"
      },
      "source": [
        "For instance, our model predicts that an iris with a 5.5cm-long sepal would have 3.1cm-long petal: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hnFtPTnHJy-z"
      },
      "outputs": [],
      "source": [
        "x_i = 5.5"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5eUHYRQnJy-z",
        "outputId": "c6a54aca-0ed9-452a-98b1-cabcb408e7c8"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "3.1199380107991725"
            ]
          },
          "execution_count": 185,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_i = beta0 + beta1*x_i\n",
        "y_i"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7EdyXhVPJy-z",
        "outputId": "6af973c1-9c13-41ee-eec0-54ed20244905"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.scatterplot(x=x, y=y)\n",
        "plt.plot(xline, yline, color='orange')\n",
        "_ = plt.scatter(x_i, y_i, marker='o', color='purple')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HrSoRDT1Jy-z"
      },
      "source": [
        "As a second example, using the same simulated \"Alzheimer's drug\" data as the [*Regression in PyTorch* notebook](https://github.com/jonkrohn/ML-foundations/blob/master/notebooks/regression-in-pytorch.ipynb) and several others in the *ML Foundations* series: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "t6H35qYXJy-z"
      },
      "outputs": [],
      "source": [
        "x = np.array([0, 1, 2, 3, 4, 5, 6, 7.])\n",
        "y = np.array([1.86, 1.31, .62, .33, .09, -.67, -1.23, -1.37])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uhPksXevJy-z",
        "outputId": "1a2af8b9-56b3-474f-85c9-fb69af09d420"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.scatterplot(x=x, y=y)\n",
        "plt.title(\"Clinical Trial\")\n",
        "plt.xlabel(\"Drug dosage (mL)\")\n",
        "_ = plt.ylabel(\"Forgetfulness\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wlJ8-81iJy-z",
        "outputId": "d3141c63-7f1c-45ba-bf5f-5e3951512fe9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[ 6.        , -2.81571429],\n",
              "       [-2.81571429,  1.34362143]])"
            ]
          },
          "execution_count": 189,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cov_mat = np.cov(x, y)\n",
        "cov_mat"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cVIviYSUJy-0",
        "outputId": "53814dda-5d1e-4d45-b738-67ed94c0b6fd"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "-0.4692857142857143"
            ]
          },
          "execution_count": 190,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "beta1 = cov_mat[0,1]/cov_mat[0,0]\n",
        "beta1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YrQUCrxkJy-0",
        "outputId": "77300fcf-10d2-44a6-e671-91e0abdf720c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1.76"
            ]
          },
          "execution_count": 191,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "beta0 = y.mean() - beta1*x.mean()\n",
        "beta0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "h2WTwF-mJy-0"
      },
      "outputs": [],
      "source": [
        "xline = np.linspace(0, 7, 1000)\n",
        "yline = beta0 + beta1*xline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XMx4vEgxJy-0"
      },
      "source": [
        "By administering 4.5mL of the drug, our model predicts a forgetfulness score of -0.35:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_OoPnTyaJy-1"
      },
      "outputs": [],
      "source": [
        "x_i = 4.5"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DvFBImXcJy-1",
        "outputId": "578ed746-eeaa-4b62-9d90-dd597db83c81"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "-0.35178571428571437"
            ]
          },
          "execution_count": 194,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_i = beta0 + beta1*x_i\n",
        "y_i"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8_e_U2jiJy-1",
        "outputId": "e009df28-09f6-439a-a1ae-795d3ad1dbb5"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.scatterplot(x=x, y=y)\n",
        "plt.title(\"Clinical Trial\")\n",
        "plt.xlabel(\"Drug dosage (mL)\")\n",
        "plt.ylabel(\"Forgetfulness\")\n",
        "plt.plot(xline, yline, color='orange')\n",
        "_ = plt.scatter(x_i, y_i, marker='o', color='purple')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UoSetfajJy-2"
      },
      "source": [
        "**Exercise**: With data from female Adélie penguins, create a linear least squares model that predicts body mass with flipper length. Predict the mass of a female Adélie penguin that has a flipper length of 197mm."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bAHMnL66lFqC",
        "outputId": "eef47f1a-f7a3-43d6-83ed-b5749107ec58"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>species</th>\n",
              "      <th>island</th>\n",
              "      <th>bill_length_mm</th>\n",
              "      <th>bill_depth_mm</th>\n",
              "      <th>flipper_length_mm</th>\n",
              "      <th>body_mass_g</th>\n",
              "      <th>sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>39.1</td>\n",
              "      <td>18.7</td>\n",
              "      <td>181.0</td>\n",
              "      <td>3750.0</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>39.5</td>\n",
              "      <td>17.4</td>\n",
              "      <td>186.0</td>\n",
              "      <td>3800.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>40.3</td>\n",
              "      <td>18.0</td>\n",
              "      <td>195.0</td>\n",
              "      <td>3250.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>36.7</td>\n",
              "      <td>19.3</td>\n",
              "      <td>193.0</td>\n",
              "      <td>3450.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>39.3</td>\n",
              "      <td>20.6</td>\n",
              "      <td>190.0</td>\n",
              "      <td>3650.0</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  species     island  bill_length_mm  ...  flipper_length_mm  body_mass_g     sex\n",
              "0  Adelie  Torgersen            39.1  ...              181.0       3750.0    Male\n",
              "1  Adelie  Torgersen            39.5  ...              186.0       3800.0  Female\n",
              "2  Adelie  Torgersen            40.3  ...              195.0       3250.0  Female\n",
              "4  Adelie  Torgersen            36.7  ...              193.0       3450.0  Female\n",
              "5  Adelie  Torgersen            39.3  ...              190.0       3650.0    Male\n",
              "\n",
              "[5 rows x 7 columns]"
            ]
          },
          "execution_count": 196,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "adelie.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ez3YcuanhuHI"
      },
      "outputs": [],
      "source": [
        "x = adelie[adelie.sex == 'Female']['flipper_length_mm'].to_numpy()\n",
        "y = adelie[adelie.sex == 'Female']['body_mass_g'].to_numpy()/1000"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U7piwPvujy_S",
        "outputId": "ec4f0be4-4e5a-476c-c8f3-69efeff98458"
      },
      "outputs": [
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAD4CAYAAAD8Zh1EAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAfhElEQVR4nO3dfXBUV90H8O/uzRssbBZoEhCwSCXKkJJ0tEOcjikhAoEYQgPWGqAWahg7QezQKRNa7Yyi9M0Rgj7Dy6htaoVnhFKiUMVaLBMFSumUQbA1VIHAAyRAwLy02WRv7vNHkpUlu9l7N/fuPffs9/NXm73snt+95/5yc87+znFpmqaBiIgcz213A4iIyBxM6EREkmBCJyKSBBM6EZEkmNCJiCSRZNcH9/T0QFWd9wUbRXE5st23kyUOgLGISpZYRIsjOVmJ+JptCV1VNdy8+bFdHx8zn2+4I9t9O1niABiLqGSJRbQ4MjJGRnyNQy5ERJJgQicikgQTOhGRJJjQiYgkwYRORCQJJnQiJ3EBVzsD+OD6x7jaqQIuuxtEIrHta4tEZJALOHqxFU++dhKd3T1IS3bjxUXTkT/BC4jzNWmyEZ/QiRzi6ieBYDIHgM7uHjz52klc/SRgc8tIFEzoRA5xraMrmMz7dXb34FpHl00tItEwoRM5xB2eVKQlh96yaclu3OFJsalFJBomdCKHyBim4MVF04NJvX8MPWMYp8KoF3sCkVNoQP4EL/aszMe1ji7c4UnpTeacEKU+TOhETqIBGWlJyEhLCv4/UT8OuRARSYIJnYhIEkzoRESSYEInIpIEEzoRkSSY0ImIJMGETkRy4EqU/B46EUmAK1EC4BM6EUmAK1H2YkInIsfjSpS9mNCJyPG4EmWvqAnd7/dj8eLFWLBgAUpKSrB58+YBx1y6dAnLli3DwoULUVpaikOHDlnSWKKY6J0scwMXOrpx/EobLnZ0m/O4w4m6uOBKlL2iRpuSkoLa2lp4PB50d3ejoqICBQUFyMvLCx6zZcsWzJs3DxUVFfjoo4+wcuVKHDx40NKGE+mid7LMDbx99ia+X3cqeNz6shzM/IwP6In47uZ8Ng0dV6IEoOMZxOVywePxAAACgQACgQBcLteAY9rb2wEAbW1tyMzMtKCpRMbpnSy70NYdTOb9x32/7hQutHVb/tlkkr6VKKeOGd67GmWCJXNA59cWVVVFeXk5GhsbUVFRgdzc3JDXV61ahUcffRSvvvoqPvnkE7z00ktR31NRXPD5hsfWahspituR7b6dLHEAg8dy5vyNsJNlN/0qpoz1Bn/2XlNz2OOa2/24e3x6TO3S+9m3SpTr4iROikNXQlcUBXV1dWhtbUVVVRUaGhqQnZ0dfH3//v144IEHsGLFCrz//vtYu3Yt9u3bB7c78h8Aqqrh5s2Phx5BnPl8wx3Z7tvJEgcweCy+1CSkJbtDEmtashu+VCXk32SNSA17XOaI1JjPk97P1huL08gSi2hxZGSMjPiaoWkfr9eLGTNmoL6+PuTnu3fvxrx58wAA99xzD/x+P27cuBFDU4nMpXeybMLIZKwvywk5bn1ZDiaOTLb8s4nMErVntbS0ICkpCV6vF52dnTh8+DAqKytDjhk3bhyOHDmC8vJy/Otf/4Lf78fo0aMtazSRbnony3qAmZ/xYcejM9DU1omskWm9yTzWCVEjn01kkqgJvbm5GdXV1VBVFZqmobi4GIWFhaipqUFOTg6KiopQXV2N733ve3j55Zfhcrnw3HPPDZg4JbKN3m3beoCJnmRM9CQH/z9un01kApemabZ0se5uVahxKb1EG0+LlSxxAIxFVLLEIlocpo2hExE5nsTFXpydIaLEIXmxF5/QiShhyF7sxYRORAlD9lUZmdCJKGHIviojEzqRjCSe+BsK2Yu95IiCiP5L8om/IZG82ItP6ESSkX3ib8gkXpWRCZ1IMrJP/FFkTOhEkpF94o8iY0In5+qb+Hv3/A1zJv7snEjs2/7urX82D779nY42yj7xR5HxCpMzmT3xZ+dEot7t7/S2UfKJP4qMT+jkSGZP/Nk5kah3+ztDbZR44o8iY0InRzJ74s/OicSmts6wn93U1ilMG8kZmNDJkcye+LNzInHsyLSwn501Mk2YNpIzMKGTI5k98WfnRKLe7e842UnRcIMLg0Rb7D5WUsTh6h1XvulX4UtVhj7x1/d+tkwkunvH0pvb/cgckRp5+zs722iQFH0M4sUx2AYX/NVOztU38TdlrLf3hhtqYrNzu7i+7e/uHp/eG0uk7e+4pR0NgkMuRESSYEInIpIEEzoRkSSY0ImIJMGETkQkCSZ0IiJJMKFTZNzGjMhR+D10Co/bmBE5Dp/QKSxuY0bkPEzoFBZX9iNyHiZ0Cosr+xE5T9SE7vf7sXjxYixYsAAlJSXYvHlz2OPeeOMNzJ8/HyUlJXjiiSdMbyjFlyNW9jN7Czo76d2CjmgQUe/OlJQU1NbWwuPxoLu7GxUVFSgoKEBeXl7wmHPnzmH79u3YuXMn0tPTcf36dUsbTXEg+jZmMk3a6t2CjiiKqM8BLpcLHo8HABAIBBAIBOByhT4K/fa3v8WSJUuQnp4OABgzZowFTaW4E3gbM5kmbfVuQUcUja6/n1VVRXl5ORobG1FRUYHc3NyQ18+dOwcAeOihh9DT04NVq1ahoKBg0PdUFBd8vuGxtdpGiuJ2ZLtv5/Q4zpy/EXbS9qZfxZSxXptaFZv3mprDxtLc7sfd49NtatXQOb2P9XNSHLoSuqIoqKurQ2trK6qqqtDQ0IDs7Ozg66qq4vz58/j1r3+NK1euYOnSpfj9738PrzfyjaWqmlCLxusl2mL3sXJ6HL7UJKQlu0MSYVqyG75UxXFxZY1IDRtL5ohUx8VyK6f3sX6ixTHYBheGpl68Xi9mzJiB+vr6kJ9nZWVh1qxZSE5OxsSJEzFp0qTgUzuRFRwxaauT3i3oiKKJ2vtbWlqQlJQEr9eLzs5OHD58GJWVlSHHfOUrX8H+/fuxaNEitLS04Ny5c5g4caJljSa6ddLWtC3o7NIDzPyMDzsenRF9CzqiQURN6M3NzaiuroaqqtA0DcXFxSgsLERNTQ1ycnJQVFSEL3/5y/jb3/6G+fPnQ1EUrF27FqNGjYpH+ymRmb0FnZ30bkFHNAhuEm2QaONpsZIlDoCxiEqWWESLw7QxdJKATMU4euldNZKrS8ZXIp5vi2N23gwSxU6mYhy99MaciOfGTol4vuMQM5/QE4hMxTh66Y05Ec+NnRLxfMcjZib0BJKIKyjqjTkRz42dEvF8xyNmJvQEkogrKOqNORHPjZ0S8XzHI2Ym9AQiUzGOXnpjTsRzY6dEPN/xiJlfWzRItK8wGebqHctzfDHOLaJek76Yo64aqfc4Czm+f93CtOtiM1OviQkxD/a1RXl/HVJ4MhXj6NUXc0ZaUvD/h3QcmSMRz7fFMXPIhYhIEkzoRESSYEIn+dlZkSh6NaTo7SNDOIZOcrOzIlH0akjR20eG8QmdpGZnRaLo1ZCit4+MY0InqdlZkSh6NaTo7SPjmNBJPCaO69pZkSh6NaTo7SPjmNBJLH3juuXbj+Lhl4+jfPsRHL3YGnNSt7MiUfRqSNHbR8axUtQgWSr5RI3jamcA5duPDtgwec/K/P8WY9xG6IpEg58d9+ti4bkRtY8ZJVocrBQlxxhsXDdSQo/KzopE0ashRW8fGcIhFxIKx3WJYseEbjYWagxJwo7ruoELHd1465/NuNjRHb8704r+alcsxCEXU7FQY+g0IH+CF3tW5gu/Cp9p3MDbZ2/i+3Wngv1mfVkOZn7GB/RE/+cxs6K/2hULAeDvTlOxUMMkfeO6U8cM7x3blTmZA7jQ1h1MgEBvv/l+3SlcaOu29HOt6K92xUK9mNBNxEINikVTW2fYftPU1mnp51rRX+2KhXoxoZuIE3oUi7Ej08L2m6yRaZZ+rhX91a5YqBcTuokSdkJPFjZNaE8YmYz1ZTkh/WZ9WQ4mjky29HOt6K92xUK9WFhkkNBFLAaIViwxFKbEYveEtrt3/Lm53Y/MEam9CTAek4hW9Fe7YrGIaPfKYIVFTOgGiXZxYyVLHIA5scRSoWoFXhfxiBbHYAmdQy5E4IQ2ySFqQvf7/Vi8eDEWLFiAkpISbN68OeKxBw4cwOc+9zn8/e9/N7WRlmIhkHOZWMCSsBPa7P9Sifq3ZEpKCmpra+HxeNDd3Y2KigoUFBQgLy8v5Lj29na88soryM3NtayxprN73JRiZ3IBS/8E4e19QdQ5EFOw/0sn6jONy+WCx+MBAAQCAQQCAbhcA3+N19TUoLKyEqmpqea30iIsBHIu0wtYbqlQfeWRL2LPynzpExv7v3x0zfaoqory8nI0NjaioqJiwFP46dOnceXKFcycORO//OUvdX2worjg8w033mITnTl/I+y46U2/iiljvWH/jaK4bW+3GZwex3tNzWGvXXO7H3ePT4/5fX3pwJShNm4I4nldYun/Rji9j/VzUhy6ErqiKKirq0NrayuqqqrQ0NCA7OxsAEBPTw+ee+45PPvss4Y+WFU122eOfalJSEt2D/hmgy9Vidg20Wa8Y+X0OLJGpIa9dpkjUh0dVzyvSyz939D7O7yP9RMtDtO+5eL1ejFjxgzU19cHf9bR0YGGhgY8/PDDmDVrFk6cOIHHHnvMEROjLARyLhawDB37v3yifg+9paUFSUlJ8Hq96OzsxIoVK1BZWYnCwsKwxy9btgxr167F3XffPegHC/M9dNF3lLGIFHFIVsACcMciEYkWx5B2LGpubkZ1dTVUVYWmaSguLkZhYSFqamqQk5ODoqIiUxsbd9yxxbl6gImeZNw9Pr33hnN4MrcF+79UWClqkGi/rWMlSxwAYxGVLLGIFgcrRYmIEgATOpGVzK7EdEJlZ18b3z1/Q9w2SorT2URWMbsS0wmVnU5oo8T4hE5kEbMrMZ1Q2emENsqMCZ3IImav4OiEFSGd0EaZMaGTeJwwTqyDoRUcdYw7O2FFSCe0UWZM6CSWvjHY8u1H8fDLx1G+/QiOXmx1ZFLXXYl5S8wVv3gnYsxOqOzMGK6EreDNGC5OG2XG76EbJNp3UmMlahyx7BwkaiwAdFViGopZ8C0Or3YG8Nj/vo+vTh8PlwvQNGDfyf/DlofuievOT2YSrX8NqVKUKJ4GG4N1ZELQUYlpKGbBKzuvdXTh/PVP8D9/+WjAzx15/RyGQy4klEQcg5UpZplicSImdIrMhslJW8eJjcRr4rlxwti4XjLF4kQcQzdItPG0WEWNw84CETtWwDQSrxXnpi/mm34VvlRFuLFxQ2SKBeLd81zLhQyztUCkb5x46pjhveOucUgGRuK15Nz0xXzvnaPiFrNlZIrFYZjQKaxEKxAxEm+inRtyDiZ0CivRJreMxJto54acgwmdwkq0yS0j8Tpm4pYSDidFDRJtgiRWuuIQvIiln2nXxEi8Fp2bQWNx2EqGCXWvxBEnRSk2NkxO2spIvIJP3FJiYkIncghOxlI0TOhEDsHJWIqGCV10nASjPo6ZqOYWdLYRrCdQCIdNgpHFNCB/ghd7VuaLO1HNPmsrPqELjJNgNIDgE9Xss/ZiQhcYJ8HIadhn7cWELjBOgpHTsM/aiwldYI6ZBCPqwz5rL1aKGhT3qjE7KhIdhrEIhsvnWopb0DmZ4FuOEQ3Q12enjPX2JkL22bjhkAsRkSSiPqH7/X4sWbIEXV1dUFUVc+fOxerVq0OOeemll7Br1y4oioLRo0djw4YNGD9+vGWNJsGEDAulImOY4synMiviEP3ciN4+MiRqQk9JSUFtbS08Hg+6u7tRUVGBgoIC5OXlBY+ZOnUqXnvtNQwbNgw7duzAiy++iE2bNlnacBKELIUkFm0rJ/S5Eb19ZFjUIReXywWPxwMACAQCCAQCcLlCa3nz8/MxbNgwAEBeXh6uXLliQVNJRLIUklgRh+jnRvT2kXG6JkVVVUV5eTkaGxtRUVGB3NzciMfu3r0bBQUFUd9TUVzw+Ybrb6kgFMXtyHbfzqw4zpy/EbaQ5KZfxZSx3iG/vx5mxGJFHLG8Zzz7l9XXjvdK/OlK6IqioK6uDq2traiqqkJDQwOys7MHHFdXV4dTp07h1VdfjfqeqqoJ9VUgvUT7ClOszIrDl5qEtGR3SGJIS3bDl6rE7TyZEYsVccTynvHsX1ZfO94r1jBtgwuv14sZM2agvr5+wGuHDx/G1q1bsWXLFqSksCpMCjpWepSlkMSKOCw5NyauvinLtaP/ilpY1NLSgqSkJHi9XnR2dmLFihWorKxEYWFh8Jh//OMfWL16NX7xi19g0qRJuj6YhUX2ihqHkQkzm7eqs2ULOoveM+5b0Fl47RLmXomzwZ7Qoyb0Dz/8ENXV1VBVFZqmobi4GKtWrUJNTQ1ycnJQVFSERx55BA0NDcjIyAAAjBs3Dlu3bh20UUzo9ooWx9XOAMq3Hx3w5/ielfn/LXIShCzXBBg8FiddE0Ce6yJaHEOqFP385z+PvXv3Dvj5d7/73eB/v/zyy7G1jIQ12Kp5IiaPRMBrQtE4q1KUu/fEjaFV8+y6LmbvjCN4/+JKhhSNc36tswgirvonzG4/3wPGWO26LmZ/rgP6l+5rQgnLMastijJ+KNp4Wqx0xaFjwsyu62L25zqmf9k8AW1EQt0rcSTFaoscP7SBjpUe7bouZn+uY/oXV9+kQThmDJ3jh2Ky67qY/bnsXyQDxyR0FkGIya7rYvbnsn+RDBwzhg5AiPFD0cbTYmVqHHZdF7N3xmH/MpUssYgWhxRj6AA4figqu66L2TvjsH+RwzlmyIWIiAbHhE5EJAkmdJKf4BWgRGZx1hg6kVEOqAAlMguf0Elq3GaNEgkTOkltsApQItkwoZPUWAFKiYQJneLHhslJVoBSImGvpviwa3JSA/IneLFnZb4jVigkGgo+oVNc2Do52VcBOnXM8N4qUCZzkhQTOsUFJyeJrMeETnFh6+SkFWP3Zr+n3u30WCRFg+AYOsWFbdunWTF2b9f2dyySoiictXyuAERbSjNWtsRh0fK0g8VixdZydm1/J8o2eXrxXrHGYMvncsiF4seGyUkrxu7Nfk+978d5CIqGCZ2kZsXYvV3b37FIiqJhQiepWVFYZNf2dyySomg4hm6QaONpsZIlDkBHLFaM3Zv9nnq30xNgmzy9ZOljosUhzxZ0RLGwYms5s99T73Z63CaPBsEhFyIiSTChExFJIuqQi9/vx5IlS9DV1QVVVTF37lysXr065Jiuri6sXbsWp0+fhs/nw8aNGzFhwgTLGk0EIDiefOb8DfhSk5AxTOEQRL+QsfZUnpsEETWhp6SkoLa2Fh6PB93d3aioqEBBQQHy8vKCx+zatQterxdvvvkm9u/fj5/85CfYtGmTpQ2nBMeqych4bhJW1CEXl8sFj8cDAAgEAggEAnC5QheQOHjwIB544AEAwNy5c3HkyBHY9OUZShDcWi4ynpvEpetbLqqqory8HI2NjaioqEBubm7I601NTRg3blzvGyYlYeTIkbhx4wZGjx4d8T0VxQWfb/gQmm4PRXE7st23c3ocZ87fCFs1edOvYspYr02tGjozroso58bpfayfk+LQldAVRUFdXR1aW1tRVVWFhoYGZGdnD+mDVVUT6rudeon2ndRYOT0OX2oS0pLdA9Y18aUqzo7LhOsiyrlxeh/rJ1ocpq3l4vV6MWPGDNTX14f8PCsrC5cvXwbQOyzT1taGUaNGxdBUIn1YNRkZz03iinqFW1pakJSUBK/Xi87OThw+fBiVlZUhx8yaNQuvv/467rnnHhw4cAD5+fkDxtmJTHXL1nJRqysTDbfdS1hRE3pzczOqq6uhqio0TUNxcTEKCwtRU1ODnJwcFBUVYfHixXjyyScxe/ZspKenY+PGjfFoOyU6vdWViYgVpQmJa7kYJNp4WqxkiQNgLKKSJRbR4uB66ERECYAJnYhIEkzoRESSYEInIpIEEzoRkSSY0IkSmQu42hnAB9c/xtVOFWD5iKOxdIwoUXFVRunwCZ0oQXFVRvkwoRMlqGsdXWFXZbzW0WVTi2iomNCJEtQdntTgAl790pLduMOTYlOLaKiY0EXHSav4MXKuJbguXJVRPrxyIuOkVfwYOdeyXBeuyigdPqELjJNW8WPkXEt1XfpWZZw6ZnjvyoxM5o7GhC4wTlrFj5FzzetComJCFxgnreLHyLnmdSFRMaELjJNW8WPkXPO6kKi4wYVBcV/s3tU7Zmv2pJVoi/YPhWmxGDnXvC5RyRKLaHEMtsEFHylEx63E4sfIueZ1IQFxyIWISBJM6BSZXcUzEhTtENmBQy4Unl3FM7IU7RDZgE/oFJZdxTNSFe0QxRkTOoVlV/EMi3aIYseETmHZVTzDoh2i2DGhU1h2Fc+waIcodrxLKDy7VuLjCoBEMWNCp8jsKp5h0Q5RTDjkQkQkiahP6JcvX8batWtx/fp1uFwuPPjgg/jmN78ZckxbWxuefPJJXLp0CaqqYsWKFVi0aJFljSYiooGiJnRFUVBdXY1p06ahvb0dixYtwn333YfPfvazwWN+85vf4K677sLWrVvR0tKC4uJilJaWIiWF30wgIoqXqEMumZmZmDZtGgBgxIgRmDx5MpqamkKOcblc6OjogKZp6OjoQHp6OpKSODxPRBRPhpbPvXjxIpYuXYp9+/ZhxIgRwZ+3t7fjsccew9mzZ9HR0YGNGzdi5syZg75XT08PVNV5s12K4oaq9kQ/UHCyxAEwFlHJEotocSQnKxFf0/0Y3dHRgdWrV+Opp54KSeYA8Ne//hVTp07FK6+8gsbGRixfvhxf/OIXBxx3K7fbDbdDp2Td7sgn1ElkiQNgLKKSJRanxKErpXZ3d2P16tUoLS3FnDlzBry+Z88ezJkzBy6XC3feeScmTJiAf//736Y3loiIIoua0DVNw9NPP43Jkydj+fLlYY8ZN24cjhw5AgC4du0azp49iwkTJpjbUiIiGlTUMfTjx49jyZIlyM7OhrtvjGTNmjW4dOkSAOAb3/gGmpqasG7dOly9ehWapqGyshJlZWXWt56IiIJs21OUiIjM5dBpSSIiuh0TOhGRJJjQiYgkwYR+i3Xr1uFLX/oSvvrVrwZ/9vjjj6OsrAxlZWWYNWtWcLL34sWLmD59evC1Z555xq5mhxUulg8++AAPPvggysrKUF5ejpMnTwLo/SbTj370I8yePRulpaU4ffq0Xc0Oy0gs77zzDr7whS8Er8vPf/5zu5odVrhYPvzwQ3z9619HaWkpvv3tb6O9vT342rZt2zB79mzMnTsX9fX1djQ5LCNxiH6vXL58GcuWLcP8+fNRUlKC2tpaAMDNmzexfPlyzJkzB8uXL8d//vMfAILfLxoFHTt2TDt16pRWUlIS9vVnn31W+9nPfqZpmqZduHAh4nEiCBfL8uXLtbffflvTNE17++23taVLlwb/+9FHH9V6enq0999/X1u8eLEtbY7ESCxHjx7VVq5caUs79QgXS3l5ufbOO+9omqZpu3bt0jZu3KhpmqadOXNGKy0t1fx+v9bY2KgVFRVpgUDAlnbfzkgcot8rTU1N2qlTpzRN07S2tjZtzpw52pkzZ7Tnn39e27Ztm6ZpmrZt2zbthRde0DRN7PuFT+i3uPfee5Genh72NU3T8Ic//CHkiURk4WLpX3MH6F0hMzMzEwDw1ltvYeHChXC5XMjLy0Nrayuam5vj3uZIjMQiunCxnDt3Dvfeey8A4L777sOf/vQnAL3XpaSkBCkpKZg4cSLuvPPO4F8idjMSh+girVfVf18AwMKFC/HnP/8ZgNj3CxO6TsePH8eYMWMwadKk4M8uXryIhQsXYunSpTh+/Lh9jdPpqaeewgsvvID7778fzz//PNasWQMAaGpqwtixY4PHjR07dsACbKKJFAsAnDhxAgsWLMC3vvUtnDlzxsZW6jNlyhS89dZbAIA//vGPuHz5MoCB1yUrK0vo6xIpDsA598rFixfxwQcfIDc3F9evXw8+KGRkZOD69esAxL5fmNB12rdvX8jTeWZmJv7yl79g7969qK6uxhNPPBEy9iminTt3Yt26dTh06BDWrVuHp59+2u4mxSxSLNOmTcPBgwfxu9/9DsuWLUNVVZXNLY3uxz/+MXbs2IHy8nJ0dHQ4dtnpSHE45V4ZbL0ql8sFl8tlU8v0Y0LXIRAI4M0338T8+fODP0tJScGoUaMAADk5Ofj0pz+Ns2fP2tVEXV5//fXgWjzz5s0L/vmelZWFK1euBI+7cuUKsrKybGmjXpFiGTFiBDweDwDg/vvvRyAQQEtLi23t1OOuu+7Cr371K+zZswclJSWYOHEigIHXpampSejrEikOJ9wr4darGjNmTHAopbm5GaNHjwYg9v3ChK7D4cOHMXny5JA/s1paWqCqKgDgwoULOHfuXLADiyozMxPHjh0DABw9ejQ4fDRr1izs3bsXmqbhxIkTGDlypPBj0pFi6V9+AgBOnjyJnp6eYDIRVf+f8j09PdiyZQseeughAL3XZf/+/ejq6gr2senTp9vZ1EFFikP0e0WLsF5V/30BAHv37kVRUVHIz0W8X7gLxS3WrFmDY8eO4caNGygoKMB3vvMdfO1rX8Mbb7yBkpKSkGPfffddbN68GUlJSXC73fjBD34An89nU8sHChfL+vXrsWHDBgQCAaSmpuKHP/whgN4n2UOHDmH27NkYNmwYNmzYYHPrQxmJ5cCBA9i5cycURUFaWhp++tOfCvWncrhYPv74Y+zYsQMAMHv27OD2jVOmTMG8efMwf/58KIqCZ555BooixjKuRuIQ/V557733UFdXh+zs7ODXktesWYOVK1fi8ccfx+7du/GpT30KmzZtAiD2/cK1XIiIJMEhFyIiSTChExFJggmdiEgSTOhERJJgQicikgQTOhGRJJjQiYgk8f/SStzilvE+XgAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "_ = sns.scatterplot(x=x, y=y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gqUW4gVailR5",
        "outputId": "f21df053-5529-433c-c992-1ea7bf676f52"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[31.304414  ,  0.3962852 ],\n",
              "       [ 0.3962852 ,  0.07256564]])"
            ]
          },
          "execution_count": 199,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cov_mat = np.cov(x, y)\n",
        "cov_mat"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UyX0jsOVjD6V",
        "outputId": "0b41cf5e-9b19-44a8-d0a7-c4a96269cb29"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.012659083726357767"
            ]
          },
          "execution_count": 200,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "beta1 = cov_mat[0,1]/cov_mat[0,0]\n",
        "beta1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0JO7HmUgjEYd",
        "outputId": "b3823402-ea3a-4154-9a3f-23c1fa9a3f89"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.9915290574707036"
            ]
          },
          "execution_count": 201,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "beta0 = y.mean() - beta1*x.mean()\n",
        "beta0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "o2ZfBlXUnFrL"
      },
      "outputs": [],
      "source": [
        "x_i = 197"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iOEfmJ7Um9Zz",
        "outputId": "3ee0a90c-14c0-4d53-86f3-00d3cc160fc5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "3.485368551563184"
            ]
          },
          "execution_count": 203,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_i = beta0 + beta1*x_i\n",
        "y_i"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QuGxsnomjHau"
      },
      "outputs": [],
      "source": [
        "xline = np.linspace(170, 205, 1000)\n",
        "yline = beta0 + beta1*xline"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6_muUi5rkCoM",
        "outputId": "d886108a-19dd-4d29-efae-e12c1178e301"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.scatterplot(x=x, y=y)\n",
        "plt.title(\"Female Adélie Penguins\")\n",
        "plt.xlabel(\"Flipper Length (mm)\")\n",
        "plt.ylabel(\"Body Mass (kg)\")\n",
        "plt.plot(xline, yline, color='orange')\n",
        "_ = plt.scatter(x_i, y_i, marker='o', color='purple')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ovzVhcUEJy-2"
      },
      "source": [
        "### Ordinary Least Squares"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_zqiEXPQJy-2"
      },
      "source": [
        "**Ordinary least squares** (OLS) is a linear least squares method we can use to estimate the parameters of regression models that have more than one predictor variable, e.g.: \n",
        "\n",
        "$$ y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\beta_3 x_3 + \\epsilon $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QOD7BK_LJy-2"
      },
      "source": [
        "Generalizing to $m$ predictors: \n",
        "$$ y = \\beta_0 + \\sum_{j=1}^m \\beta_j x_j + \\epsilon $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fMFhZs13Jy-2"
      },
      "source": [
        "To keep the calculations as simple as possible, however, for now we'll stick with a single predictor $x$ (in an example adapted from [here](https://en.wikipedia.org/wiki/Linear_least_squares#Example)):"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "goSmSa_9Jy-2"
      },
      "outputs": [],
      "source": [
        "x = np.array([1, 2, 3, 4.])\n",
        "y = np.array([6, 5, 7, 10.])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YvHavKI0Jy-2"
      },
      "outputs": [],
      "source": [
        "sns.set_style('whitegrid')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w66cj3ubJy-3",
        "outputId": "9cc227aa-676f-43ec-bd4c-b8634834abae"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig, ax = plt.subplots()\n",
        "plt.title('Generative Adversarial Network')\n",
        "plt.xlabel('Number of convolutional layers')\n",
        "plt.ylabel('Image realism (out of 10)')\n",
        "_ = ax.scatter(x, y)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8xd-0t1kJy-3"
      },
      "source": [
        "As is typical in regression model-fitting, we have an *overdetermined* system of linear algebra equations. From the general regression equation $y = \\beta_0 + \\beta_1 x$, we have four equations (one for each instance $i$) with the two unknown parameters $\\beta_0$ and $\\beta_1$ shared across the system. \n",
        "$$ 6 = \\beta_0 + \\beta_1 $$\n",
        "$$ 5 = \\beta_0 + 2\\beta_1 $$\n",
        "$$ 7 = \\beta_0 + 3\\beta_1 $$\n",
        "$$ 10 = \\beta_0 + 4\\beta_1 $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SNsq_lXgJy-3"
      },
      "source": [
        "Since we have more equations than unknowns, we can't solve for the parameters through algebraic rearraging. We can, however, estimate parameters that approximately solve all of the equations with the *Moore-Penrose Pseudoinverse* (from [*Linear Algebra II*](https://github.com/jonkrohn/ML-foundations/blob/master/notebooks/2-linear-algebra-ii.ipynb)) or we could use partial-derivative calculus as we'll use here. Either way, with the OLS approach, our objective is to minimize the \"sum of squared errors\" (SSE). \n",
        "\n",
        "The squared error (a.k.a. quadratic cost, from *Calc II*) for a given instance $i$ is $(\\hat{y}_i-y_i)^2$.\n",
        "\n",
        "The SSE over $n$ instances is then: \n",
        "$$ \\sum_{i=1}^n (\\hat{y}_i-y_i)^2 $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uMaYVHomJy-3"
      },
      "source": [
        "In this case, where $\\hat{y}_i = \\beta_0 + \\beta_1 x_i$, we can define the SSE function as: \n",
        "$$ S(\\beta_0, \\beta_1) = \\sum_{i=1}^n (\\beta_0 + \\beta_1 x_i - y_i)^2 $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qHsXGivGJy-3"
      },
      "source": [
        "Expanding the summation out over the four instances of $i$: \n",
        "$$ S(\\beta_0, \\beta_1) = [\\beta_0 + \\beta_1 - 6]^2 + [\\beta_0 + 2\\beta_1 - 5]^2 + [\\beta_0 + 3\\beta_1 - 7]^2 + [\\beta_0 + 4\\beta_1 - 10]^2 $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TjIdKW_FJy-3"
      },
      "source": [
        "Then (rather laboriously) expanding out the squares and simplifying the result by combining like terms: \n",
        "$$ S(\\beta_0, \\beta_1) = 4\\beta_0^2 + 30\\beta_1^2 + 20\\beta_0\\beta_1 - 56\\beta_0 - 154\\beta_1 + 210 $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LlPdU9UkJy-3"
      },
      "source": [
        "To minimize SSE, we can now use partial derivatives. Specifically, to find where there is no slope of $S(\\beta_0, \\beta_1)$ with respect to $\\beta_0$: \n",
        "$$ \\frac{\\partial S}{\\partial \\beta_0} = 8\\beta_0 + 20\\beta_1 - 56 = 0 $$\n",
        "...and $\\beta_1$: \n",
        "$$ \\frac{\\partial S}{\\partial \\beta_1} = 20\\beta_0 + 60\\beta_1 - 154 = 0 $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DYE-egdwJy-3"
      },
      "source": [
        "Rearranging, we obtain a system of two linear equations called the **normal equations** (however many parameters are in the model is how many rows of equations we'll have in the system): \n",
        "$$ 8\\beta_0 + 20\\beta_1 = 56 $$\n",
        "$$ 20\\beta_0 + 60\\beta_1 = 154 $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xMP0yOeTJy-4"
      },
      "source": [
        "A handy numerical approach for solving for $\\beta_0$ and $\\beta_1$ is matrix inversion (which we covered in detail toward the end of the [*Intro to Linear Algebra* notebook](https://github.com/jonkrohn/ML-foundations/blob/master/notebooks/1-intro-to-linear-algebra.ipynb))."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HuKZjs-qJy-4"
      },
      "source": [
        "To avoid confusion with with the broader $x$ (number of GAN conv layers) and $y$ variables (image realism), let's use $A$ for the matrix of \"inputs\" and $z$ for the vector of \"outputs\", with the vector $w$ containing the unknown weights $\\beta_0$ and $\\beta_1$:\n",
        "$$ Aw = z $$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tIz8upBlJy-4",
        "outputId": "4783596f-d703-4ca1-c797-35ed7e1d1249"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[ 8, 20],\n",
              "       [20, 60]])"
            ]
          },
          "execution_count": 209,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "A = np.array([[8, 20],[20, 60]])\n",
        "A"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JnFoYiYWJy-4"
      },
      "outputs": [],
      "source": [
        "z = np.array([56, 154])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z0TDmki1Jy-4"
      },
      "source": [
        "To solve for $w$, we can invert $A$ (assuming $A$ is not singular; i.e., all of its columns are independent): \n",
        "$$ w = A^{-1}z $$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vmCLVztvJy-4",
        "outputId": "1866ab97-4da5-46ab-eab6-ac61f570bc8f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[ 0.75, -0.25],\n",
              "       [-0.25,  0.1 ]])"
            ]
          },
          "execution_count": 211,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "Ainv = np.linalg.inv(A)\n",
        "Ainv"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QamyfcqrJy-4",
        "outputId": "5299570e-cb8c-4ee0-82b5-418b7d671de3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([3.5, 1.4])"
            ]
          },
          "execution_count": 212,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "w = np.dot(Ainv, z)\n",
        "w"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RSIHQkHFJy-4"
      },
      "source": [
        "Thus, the line that minimizes the squared error across all four equations has the parameters $\\hat{\\beta}_0 = 3.5$ and $\\hat{\\beta}_1 = 1.4$: \n",
        "$$ \\hat{y} = 3.5 + 1.4 x $$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YPGKHyu4Jy-5"
      },
      "outputs": [],
      "source": [
        "xline = np.linspace(1, 4, 1000)\n",
        "yline = w[0] + w[1]*xline"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n3eNzrtrJy-5",
        "outputId": "5850541a-7817-4ca9-d992-1b76422d5ff4"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig, ax = plt.subplots()\n",
        "plt.title('Generative Adversarial Network')\n",
        "plt.xlabel('Number of convolutional layers')\n",
        "plt.ylabel('Image realism (out of 10)')\n",
        "ax.scatter(x, y)\n",
        "_ = plt.plot(xline, yline, color='orange')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d8fh1DK2Jy-5"
      },
      "source": [
        "For fun, following the linear algebra in the slides, we could output $\\hat{y}$ across all the instances $i$: \n",
        "$$ \\hat{y} = Xw $$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ruJ9QffyJy-5",
        "outputId": "b73b189c-d684-4c56-a068-0a0e6a708cb4"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "matrix([[1., 1.],\n",
              "        [1., 2.],\n",
              "        [1., 3.],\n",
              "        [1., 4.]])"
            ]
          },
          "execution_count": 215,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "X = np.concatenate([np.matrix(np.ones(x.size)).T, np.matrix(x).T], axis=1)\n",
        "X"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AAXfIJwOJy-5",
        "outputId": "58d8adc4-c275-4020-bc06-11272a211504"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "matrix([[4.9, 6.3, 7.7, 9.1]])"
            ]
          },
          "execution_count": 216,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "yhat = np.dot(X, w)\n",
        "yhat"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sI70M7PlJy-5"
      },
      "source": [
        "Incidentally, **residuals** are the distances between $\\hat{y}_i$ and $y_i$:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9uRTgp4eJy-7",
        "outputId": "beb409b0-b674-452a-876f-6e485500094a"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig, ax = plt.subplots()\n",
        "plt.title('Generative Adversarial Network')\n",
        "plt.xlabel('Number of convolutional layers')\n",
        "plt.ylabel('Image realism (out of 10)')\n",
        "ax.scatter(x, y)\n",
        "_ = plt.plot(xline, yline, color='orange')\n",
        "for i in range(x.size):\n",
        "    plt.plot([x[i],x[i]], [y[i],yhat[0,i]], color='darkred')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1QqPBtCGJy-8"
      },
      "source": [
        "The square of these residuals is what we minimize with SSE in OLS regression."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KqnQ9EMWJy-8"
      },
      "source": [
        "The above OLS approach expands to a wide variety of circumstances: \n",
        "\n",
        "* Multiple features ($x$, the predictors)\n",
        "* Polynomial (typically quadratic) features, e.g., $y = \\beta_0 + \\beta_1 x + \\beta_2 x^2$\n",
        "* Interacting features, e.g., $y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\beta_3 x_1 x_2$\n",
        "* Discrete, categorical features, incl. any combination of continuous and discrete features"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qqEd00gvJy-8"
      },
      "source": [
        "As an example of the latter..."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6ctHcVDXJy-8",
        "outputId": "6768cf21-8c9f-45e5-cf02-92dc847d77b6"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal_length</th>\n",
              "      <th>sepal_width</th>\n",
              "      <th>petal_length</th>\n",
              "      <th>petal_width</th>\n",
              "      <th>species</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>6.7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.2</td>\n",
              "      <td>2.3</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>6.3</td>\n",
              "      <td>2.5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.9</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>6.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>148</th>\n",
              "      <td>6.2</td>\n",
              "      <td>3.4</td>\n",
              "      <td>5.4</td>\n",
              "      <td>2.3</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149</th>\n",
              "      <td>5.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.1</td>\n",
              "      <td>1.8</td>\n",
              "      <td>virginica</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>150 rows × 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     sepal_length  sepal_width  petal_length  petal_width    species\n",
              "0             5.1          3.5           1.4          0.2     setosa\n",
              "1             4.9          3.0           1.4          0.2     setosa\n",
              "2             4.7          3.2           1.3          0.2     setosa\n",
              "3             4.6          3.1           1.5          0.2     setosa\n",
              "4             5.0          3.6           1.4          0.2     setosa\n",
              "..            ...          ...           ...          ...        ...\n",
              "145           6.7          3.0           5.2          2.3  virginica\n",
              "146           6.3          2.5           5.0          1.9  virginica\n",
              "147           6.5          3.0           5.2          2.0  virginica\n",
              "148           6.2          3.4           5.4          2.3  virginica\n",
              "149           5.9          3.0           5.1          1.8  virginica\n",
              "\n",
              "[150 rows x 5 columns]"
            ]
          },
          "execution_count": 218,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "iris"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TXE21UwBJy-8"
      },
      "outputs": [],
      "source": [
        "sns.set_style('darkgrid')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dAasq6klJy-9",
        "outputId": "a973bd0e-a641-4a3b-b0ef-476a07817f8a"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "_ = sns.scatterplot(x='sepal_length', y='petal_length', hue='species', data=iris)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rWjIb0itJy-9"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7cBvXBE0Jy-9",
        "outputId": "2546c58d-6850-4c8a-9090-42ff1d762b4d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>setosa</th>\n",
              "      <th>versicolor</th>\n",
              "      <th>virginica</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>148</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>150 rows × 3 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     setosa  versicolor  virginica\n",
              "0         1           0          0\n",
              "1         1           0          0\n",
              "2         1           0          0\n",
              "3         1           0          0\n",
              "4         1           0          0\n",
              "..      ...         ...        ...\n",
              "145       0           0          1\n",
              "146       0           0          1\n",
              "147       0           0          1\n",
              "148       0           0          1\n",
              "149       0           0          1\n",
              "\n",
              "[150 rows x 3 columns]"
            ]
          },
          "execution_count": 222,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "dummy = pd.get_dummies(iris.species)\n",
        "dummy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JTobklLmJy-9"
      },
      "outputs": [],
      "source": [
        "y = iris.petal_length"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vrBsPaVmJy-9",
        "outputId": "4a78bb1c-e918-4242-e65c-94770cc1b439"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal_length</th>\n",
              "      <th>setosa</th>\n",
              "      <th>versicolor</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>6.7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>6.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>6.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>148</th>\n",
              "      <td>6.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149</th>\n",
              "      <td>5.9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>150 rows × 3 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     sepal_length  setosa  versicolor\n",
              "0             5.1       1           0\n",
              "1             4.9       1           0\n",
              "2             4.7       1           0\n",
              "3             4.6       1           0\n",
              "4             5.0       1           0\n",
              "..            ...     ...         ...\n",
              "145           6.7       0           0\n",
              "146           6.3       0           0\n",
              "147           6.5       0           0\n",
              "148           6.2       0           0\n",
              "149           5.9       0           0\n",
              "\n",
              "[150 rows x 3 columns]"
            ]
          },
          "execution_count": 224,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "X = pd.concat([iris.sepal_length, dummy.setosa, dummy.versicolor], axis=1)\n",
        "X # virginia as \"baseline\" where setosa and versicolor are both 0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0_7DhYr4Jy-9",
        "outputId": "6b90a733-7379-4a5a-ddaf-23b252fd449e"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ]
        }
      ],
      "source": [
        "import statsmodels.api as sm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9PPA9mCEJy--",
        "outputId": "d91041f1-c973-4e7e-eca0-5c3f9d64a109"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>const</th>\n",
              "      <th>sepal_length</th>\n",
              "      <th>setosa</th>\n",
              "      <th>versicolor</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>5.1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>4.9</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>4.7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>4.6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>1.0</td>\n",
              "      <td>6.7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>1.0</td>\n",
              "      <td>6.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>1.0</td>\n",
              "      <td>6.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>148</th>\n",
              "      <td>1.0</td>\n",
              "      <td>6.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149</th>\n",
              "      <td>1.0</td>\n",
              "      <td>5.9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>150 rows × 4 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     const  sepal_length  setosa  versicolor\n",
              "0      1.0           5.1       1           0\n",
              "1      1.0           4.9       1           0\n",
              "2      1.0           4.7       1           0\n",
              "3      1.0           4.6       1           0\n",
              "4      1.0           5.0       1           0\n",
              "..     ...           ...     ...         ...\n",
              "145    1.0           6.7       0           0\n",
              "146    1.0           6.3       0           0\n",
              "147    1.0           6.5       0           0\n",
              "148    1.0           6.2       0           0\n",
              "149    1.0           5.9       0           0\n",
              "\n",
              "[150 rows x 4 columns]"
            ]
          },
          "execution_count": 226,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "X = sm.add_constant(X)\n",
        "X"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6wQJy4T3Jy--"
      },
      "outputs": [],
      "source": [
        "model = sm.OLS(y, X)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Cbl_mTucJy--"
      },
      "outputs": [],
      "source": [
        "result = model.fit()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q3Gu75QLJy--",
        "outputId": "628ee16b-b7f0-4d67-bbc5-02b3c20a612e"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>      <td>petal_length</td>   <th>  R-squared:         </th> <td>   0.975</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.974</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   1890.</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>             <td>Wed, 03 Nov 2021</td> <th>  Prob (F-statistic):</th> <td>1.46e-116</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                 <td>19:41:12</td>     <th>  Log-Likelihood:    </th> <td> -21.237</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>      <td>   150</td>      <th>  AIC:               </th> <td>   50.47</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>          <td>   146</td>      <th>  BIC:               </th> <td>   62.52</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>              <td>     3</td>      <th>                     </th>     <td> </td>    \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "        <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>const</th>        <td>    1.3877</td> <td>    0.301</td> <td>    4.611</td> <td> 0.000</td> <td>    0.793</td> <td>    1.982</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>sepal_length</th> <td>    0.6321</td> <td>    0.045</td> <td>   13.962</td> <td> 0.000</td> <td>    0.543</td> <td>    0.722</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>setosa</th>       <td>   -3.0900</td> <td>    0.091</td> <td>  -33.870</td> <td> 0.000</td> <td>   -3.270</td> <td>   -2.910</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>versicolor</th>   <td>   -0.8799</td> <td>    0.064</td> <td>  -13.800</td> <td> 0.000</td> <td>   -1.006</td> <td>   -0.754</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td> 0.652</td> <th>  Durbin-Watson:     </th> <td>   1.757</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th> <td> 0.722</td> <th>  Jarque-Bera (JB):  </th> <td>   0.310</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>          <td>-0.022</td> <th>  Prob(JB):          </th> <td>   0.856</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>      <td> 3.218</td> <th>  Cond. No.          </th> <td>    82.2</td>\n",
              "</tr>\n",
              "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
            ],
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                            OLS Regression Results                            \n",
              "==============================================================================\n",
              "Dep. Variable:           petal_length   R-squared:                       0.975\n",
              "Model:                            OLS   Adj. R-squared:                  0.974\n",
              "Method:                 Least Squares   F-statistic:                     1890.\n",
              "Date:                Wed, 03 Nov 2021   Prob (F-statistic):          1.46e-116\n",
              "Time:                        19:41:12   Log-Likelihood:                -21.237\n",
              "No. Observations:                 150   AIC:                             50.47\n",
              "Df Residuals:                     146   BIC:                             62.52\n",
              "Df Model:                           3                                         \n",
              "Covariance Type:            nonrobust                                         \n",
              "================================================================================\n",
              "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
              "--------------------------------------------------------------------------------\n",
              "const            1.3877      0.301      4.611      0.000       0.793       1.982\n",
              "sepal_length     0.6321      0.045     13.962      0.000       0.543       0.722\n",
              "setosa          -3.0900      0.091    -33.870      0.000      -3.270      -2.910\n",
              "versicolor      -0.8799      0.064    -13.800      0.000      -1.006      -0.754\n",
              "==============================================================================\n",
              "Omnibus:                        0.652   Durbin-Watson:                   1.757\n",
              "Prob(Omnibus):                  0.722   Jarque-Bera (JB):                0.310\n",
              "Skew:                          -0.022   Prob(JB):                        0.856\n",
              "Kurtosis:                       3.218   Cond. No.                         82.2\n",
              "==============================================================================\n",
              "\n",
              "Warnings:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "\"\"\""
            ]
          },
          "execution_count": 229,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "result.summary()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "65lhtfF3Jy-_"
      },
      "source": [
        "Our earlier iris model, with sepal length as the only predictor of petal length, had $r^2 = 0.76$. In our latest iris model, a whopping 97% of the variance in petal length is explained by the predictors."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V3DZ86qDJy-_",
        "outputId": "f0fe44a7-7a23-4052-e5a1-459927ec650c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "const           1.387660\n",
              "sepal_length    0.632110\n",
              "setosa         -3.090002\n",
              "versicolor     -0.879864\n",
              "dtype: float64"
            ]
          },
          "execution_count": 230,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "beta = result.params\n",
        "beta"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "n6oYpVuLJy-_"
      },
      "outputs": [],
      "source": [
        "xline = np.linspace(4, 8, 1000)\n",
        "vi_yline = beta[0] + beta[1]*xline\n",
        "se_yline = beta[0] + beta[1]*xline + beta[2]\n",
        "ve_yline = beta[0] + beta[1]*xline + beta[3]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v9Pyh6ZLJy-_",
        "outputId": "b950331f-0234-4009-fd9a-f8140249fa29"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.scatterplot(x='sepal_length', y='petal_length', hue='species', data=iris)\n",
        "plt.plot(xline, vi_yline, color='darkgreen')\n",
        "plt.plot(xline, se_yline, color='darkblue')\n",
        "_ = plt.plot(xline, ve_yline, color='orange')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "70JLOJ5dJy-_"
      },
      "source": [
        "Now using our refined model, such that it predicts the petal length of a *versicolor* iris with a 5.5cm-long sepal: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UL28fMYsJy-_"
      },
      "outputs": [],
      "source": [
        "x_sepall_i = 5.5\n",
        "x_setosa_i = 0\n",
        "x_versic_i = 1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LA471NSkJy-_"
      },
      "outputs": [],
      "source": [
        "y_i = beta[0] + beta[1]*x_sepall_i + beta[2]*x_setosa_i + beta[3]*x_versic_i"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v4tvO0dX5vJS",
        "outputId": "d2cd55da-49fb-468a-b6d4-739cf064acc3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "3.9844000800899457"
            ]
          },
          "execution_count": 235,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_i"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kL34o98tJy_A",
        "outputId": "851e10b6-9013-4d7a-880a-51cf6ca7ce66"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.scatterplot(x='sepal_length', y='petal_length', hue='species', data=iris)\n",
        "plt.plot(xline, vi_yline, color='darkgreen')\n",
        "plt.plot(xline, se_yline, color='darkblue')\n",
        "plt.plot(xline, ve_yline, color='orange')\n",
        "_ = plt.scatter(x_sepall_i, y_i, marker='o', color='purple')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i6t754nuJy_A"
      },
      "source": [
        "...or a *virginica* with a sepal of the same length: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XXoMSuKQJy_A"
      },
      "outputs": [],
      "source": [
        "x_sepall_i = 5.5\n",
        "x_setosa_i = 0\n",
        "x_versic_i = 0 # the only change"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XKOTdNLnJy_A"
      },
      "outputs": [],
      "source": [
        "x_i = np.array([1, x_sepall_i, x_versic_i, x_versic_i])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XaovpnHbJy_A"
      },
      "outputs": [],
      "source": [
        "y_i = np.dot(beta, x_i)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "04xK7r0IJy_A",
        "outputId": "46a79e6b-e671-4baf-bdb0-804babac33a0"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.scatterplot(x='sepal_length', y='petal_length', hue='species', data=iris)\n",
        "plt.plot(xline, vi_yline, color='darkgreen')\n",
        "plt.plot(xline, se_yline, color='darkblue')\n",
        "plt.plot(xline, ve_yline, color='orange')\n",
        "_ = plt.scatter(x_i[1], y_i, marker='o', color='purple')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IJQ6gCplJy_A"
      },
      "source": [
        "(It is also possible to have the slope vary by categorical variable, not only the $y$-intercept. This is a *hierarchical linear model* and the classic text on it is [Gelman & Hill (2006)](https://amzn.to/3hoOevb).)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YJS7SoqaJy_A"
      },
      "source": [
        "**Exercise**: \n",
        "Download the Boston dataset (process is immediately below) and use the statsmodels `OLS()` method to create a model that uses at least a few of the provided features to predict house price. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "74_NxZGHJy_A"
      },
      "outputs": [],
      "source": [
        "from sklearn.datasets import load_boston"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_Q7AZyDLJy_B"
      },
      "outputs": [],
      "source": [
        "boston = load_boston()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9km3mWx_Jy_B",
        "outputId": "a1fd146e-c0ed-4829-e2cf-64b0f2f09805"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([24. , 21.6, 34.7, 33.4, 36.2, 28.7, 22.9, 27.1, 16.5, 18.9, 15. ,\n",
              "       18.9, 21.7, 20.4, 18.2, 19.9, 23.1, 17.5, 20.2, 18.2])"
            ]
          },
          "execution_count": 243,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Median house price in a given neighborhood in $1000s (in the 1970s in Boston, MA): \n",
        "y = boston.target \n",
        "y[0:20]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C9KctbIHJy_B",
        "outputId": "986d2a3f-2d82-4f14-8b4c-86f1ea559e35"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CRIM</th>\n",
              "      <th>ZN</th>\n",
              "      <th>INDUS</th>\n",
              "      <th>CHAS</th>\n",
              "      <th>NOX</th>\n",
              "      <th>RM</th>\n",
              "      <th>AGE</th>\n",
              "      <th>DIS</th>\n",
              "      <th>RAD</th>\n",
              "      <th>TAX</th>\n",
              "      <th>PTRATIO</th>\n",
              "      <th>B</th>\n",
              "      <th>LSTAT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.00632</td>\n",
              "      <td>18.0</td>\n",
              "      <td>2.31</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.538</td>\n",
              "      <td>6.575</td>\n",
              "      <td>65.2</td>\n",
              "      <td>4.0900</td>\n",
              "      <td>1.0</td>\n",
              "      <td>296.0</td>\n",
              "      <td>15.3</td>\n",
              "      <td>396.90</td>\n",
              "      <td>4.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.02731</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.07</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.469</td>\n",
              "      <td>6.421</td>\n",
              "      <td>78.9</td>\n",
              "      <td>4.9671</td>\n",
              "      <td>2.0</td>\n",
              "      <td>242.0</td>\n",
              "      <td>17.8</td>\n",
              "      <td>396.90</td>\n",
              "      <td>9.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.02729</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.07</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.469</td>\n",
              "      <td>7.185</td>\n",
              "      <td>61.1</td>\n",
              "      <td>4.9671</td>\n",
              "      <td>2.0</td>\n",
              "      <td>242.0</td>\n",
              "      <td>17.8</td>\n",
              "      <td>392.83</td>\n",
              "      <td>4.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.03237</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.18</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.458</td>\n",
              "      <td>6.998</td>\n",
              "      <td>45.8</td>\n",
              "      <td>6.0622</td>\n",
              "      <td>3.0</td>\n",
              "      <td>222.0</td>\n",
              "      <td>18.7</td>\n",
              "      <td>394.63</td>\n",
              "      <td>2.94</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.06905</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.18</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.458</td>\n",
              "      <td>7.147</td>\n",
              "      <td>54.2</td>\n",
              "      <td>6.0622</td>\n",
              "      <td>3.0</td>\n",
              "      <td>222.0</td>\n",
              "      <td>18.7</td>\n",
              "      <td>396.90</td>\n",
              "      <td>5.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>501</th>\n",
              "      <td>0.06263</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.93</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.573</td>\n",
              "      <td>6.593</td>\n",
              "      <td>69.1</td>\n",
              "      <td>2.4786</td>\n",
              "      <td>1.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>391.99</td>\n",
              "      <td>9.67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>502</th>\n",
              "      <td>0.04527</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.93</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.573</td>\n",
              "      <td>6.120</td>\n",
              "      <td>76.7</td>\n",
              "      <td>2.2875</td>\n",
              "      <td>1.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>396.90</td>\n",
              "      <td>9.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>503</th>\n",
              "      <td>0.06076</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.93</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.573</td>\n",
              "      <td>6.976</td>\n",
              "      <td>91.0</td>\n",
              "      <td>2.1675</td>\n",
              "      <td>1.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>396.90</td>\n",
              "      <td>5.64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>504</th>\n",
              "      <td>0.10959</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.93</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.573</td>\n",
              "      <td>6.794</td>\n",
              "      <td>89.3</td>\n",
              "      <td>2.3889</td>\n",
              "      <td>1.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>393.45</td>\n",
              "      <td>6.48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>505</th>\n",
              "      <td>0.04741</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.93</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.573</td>\n",
              "      <td>6.030</td>\n",
              "      <td>80.8</td>\n",
              "      <td>2.5050</td>\n",
              "      <td>1.0</td>\n",
              "      <td>273.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>396.90</td>\n",
              "      <td>7.88</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>506 rows × 13 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "        CRIM    ZN  INDUS  CHAS    NOX  ...  RAD    TAX  PTRATIO       B  LSTAT\n",
              "0    0.00632  18.0   2.31   0.0  0.538  ...  1.0  296.0     15.3  396.90   4.98\n",
              "1    0.02731   0.0   7.07   0.0  0.469  ...  2.0  242.0     17.8  396.90   9.14\n",
              "2    0.02729   0.0   7.07   0.0  0.469  ...  2.0  242.0     17.8  392.83   4.03\n",
              "3    0.03237   0.0   2.18   0.0  0.458  ...  3.0  222.0     18.7  394.63   2.94\n",
              "4    0.06905   0.0   2.18   0.0  0.458  ...  3.0  222.0     18.7  396.90   5.33\n",
              "..       ...   ...    ...   ...    ...  ...  ...    ...      ...     ...    ...\n",
              "501  0.06263   0.0  11.93   0.0  0.573  ...  1.0  273.0     21.0  391.99   9.67\n",
              "502  0.04527   0.0  11.93   0.0  0.573  ...  1.0  273.0     21.0  396.90   9.08\n",
              "503  0.06076   0.0  11.93   0.0  0.573  ...  1.0  273.0     21.0  396.90   5.64\n",
              "504  0.10959   0.0  11.93   0.0  0.573  ...  1.0  273.0     21.0  393.45   6.48\n",
              "505  0.04741   0.0  11.93   0.0  0.573  ...  1.0  273.0     21.0  396.90   7.88\n",
              "\n",
              "[506 rows x 13 columns]"
            ]
          },
          "execution_count": 244,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "X = pd.DataFrame(boston.data)\n",
        "X.columns = boston.feature_names\n",
        "X # See variable descriptions at http://lib.stat.cmu.edu/datasets/boston"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vYbThtC1Jy_B"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "u8dPMu4YJy_B"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J3LWG7aQJy_B"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jNC_ielmJy_B"
      },
      "source": [
        "### Logistic Regression"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nkdiAGZkJy_B"
      },
      "source": [
        "Reasonably often we'd like to have a regression model that predicts a binary outcome (e.g., identifying if a fast-food item is a hot dog or not a hot dog). This can be accomplished with **logistic regression**, which adapts linear regression by including the *logit* function: \n",
        "$$ x = \\text{log}(\\frac{p}{1-p}) $$\n",
        "This function uses the natural logarithm and maps a binary probability $p$ (which can only range from zero to one) to an unbounded range ($-\\infty$ to $\\infty$)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1QHfbdr9Jy_B"
      },
      "outputs": [],
      "source": [
        "def logit(my_p): # this is also available as scipy.special.logit()\n",
        "    return np.log(my_p/(1-my_p))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FylSgRYKJy_C",
        "outputId": "c0ef32f9-e015-49c7-eff9-06156352375c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.0"
            ]
          },
          "execution_count": 246,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "logit(0.5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GUXecvBTJy_C",
        "outputId": "40c9361e-0c78-44d6-fdf8-0c5414ab901e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "-2.197224577336219"
            ]
          },
          "execution_count": 247,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "logit(0.1) "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IIHMqIIlJy_C",
        "outputId": "1eaafe04-d885-4fd1-a381-b018e6431160"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "-4.59511985013459"
            ]
          },
          "execution_count": 248,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "logit(0.01) # closer to zero approaches negative infinity"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mgGSPPqrJy_C",
        "outputId": "37fc434e-40de-4dc4-dbc2-7847acbfd3ce"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "4.595119850134589"
            ]
          },
          "execution_count": 249,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "logit(0.99) # closer to one approaches positive infinity"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BIEdZbLCJy_C"
      },
      "source": [
        "More specifically, logistic regression makes use of the *expit* function (a.k.a., logistic function), which is the inverse of the logit. That is, it returns a probability $p$ when passed some unbounded input $x$: \n",
        "$$ p = \\frac{1}{1+e^{-x}} $$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fP3ZQh6bJy_C"
      },
      "outputs": [],
      "source": [
        "def expit(my_x): # this is also available as scipy.special.expit()\n",
        "    return 1/(1+np.exp(-my_x))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kF34B4WIJy_C",
        "outputId": "1300b576-cd32-48ed-f910-53a72ad36e46"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.9900000014836675"
            ]
          },
          "execution_count": 251,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "expit(4.59512)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OSiGgXvKJy_C"
      },
      "source": [
        "This logistic function allows us to map the unbounded output of a linear regression model to a probability ranging from zero to one."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oR9WuLJ3Jy_D"
      },
      "source": [
        "Let's dig right into a hands-on example: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FZMvYipCJy_D"
      },
      "outputs": [],
      "source": [
        "titanic = sns.load_dataset('titanic')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "UplF90zYJy_D",
        "outputId": "646767e0-911c-49aa-d2cd-0c80a0c98abb"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>survived</th>\n",
              "      <th>pclass</th>\n",
              "      <th>sex</th>\n",
              "      <th>age</th>\n",
              "      <th>sibsp</th>\n",
              "      <th>parch</th>\n",
              "      <th>fare</th>\n",
              "      <th>embarked</th>\n",
              "      <th>class</th>\n",
              "      <th>who</th>\n",
              "      <th>adult_male</th>\n",
              "      <th>deck</th>\n",
              "      <th>embark_town</th>\n",
              "      <th>alive</th>\n",
              "      <th>alone</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "      <td>Third</td>\n",
              "      <td>man</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Southampton</td>\n",
              "      <td>no</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C</td>\n",
              "      <td>First</td>\n",
              "      <td>woman</td>\n",
              "      <td>False</td>\n",
              "      <td>C</td>\n",
              "      <td>Cherbourg</td>\n",
              "      <td>yes</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "      <td>Third</td>\n",
              "      <td>woman</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Southampton</td>\n",
              "      <td>yes</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>S</td>\n",
              "      <td>First</td>\n",
              "      <td>woman</td>\n",
              "      <td>False</td>\n",
              "      <td>C</td>\n",
              "      <td>Southampton</td>\n",
              "      <td>yes</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>Third</td>\n",
              "      <td>man</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Southampton</td>\n",
              "      <td>no</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>S</td>\n",
              "      <td>Second</td>\n",
              "      <td>man</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Southampton</td>\n",
              "      <td>no</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>S</td>\n",
              "      <td>First</td>\n",
              "      <td>woman</td>\n",
              "      <td>False</td>\n",
              "      <td>B</td>\n",
              "      <td>Southampton</td>\n",
              "      <td>yes</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>23.4500</td>\n",
              "      <td>S</td>\n",
              "      <td>Third</td>\n",
              "      <td>woman</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Southampton</td>\n",
              "      <td>no</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>C</td>\n",
              "      <td>First</td>\n",
              "      <td>man</td>\n",
              "      <td>True</td>\n",
              "      <td>C</td>\n",
              "      <td>Cherbourg</td>\n",
              "      <td>yes</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>Q</td>\n",
              "      <td>Third</td>\n",
              "      <td>man</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Queenstown</td>\n",
              "      <td>no</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 15 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     survived  pclass     sex   age  ...  deck  embark_town  alive  alone\n",
              "0           0       3    male  22.0  ...   NaN  Southampton     no  False\n",
              "1           1       1  female  38.0  ...     C    Cherbourg    yes  False\n",
              "2           1       3  female  26.0  ...   NaN  Southampton    yes   True\n",
              "3           1       1  female  35.0  ...     C  Southampton    yes  False\n",
              "4           0       3    male  35.0  ...   NaN  Southampton     no   True\n",
              "..        ...     ...     ...   ...  ...   ...          ...    ...    ...\n",
              "886         0       2    male  27.0  ...   NaN  Southampton     no   True\n",
              "887         1       1  female  19.0  ...     B  Southampton    yes   True\n",
              "888         0       3  female   NaN  ...   NaN  Southampton     no  False\n",
              "889         1       1    male  26.0  ...     C    Cherbourg    yes   True\n",
              "890         0       3    male  32.0  ...   NaN   Queenstown     no   True\n",
              "\n",
              "[891 rows x 15 columns]"
            ]
          },
          "execution_count": 253,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "titanic"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZLeqmztuJy_D",
        "outputId": "d9e99954-a1c1-4b94-e3d3-37b7be1a9cde"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(array([0, 1]), array([549, 342]))"
            ]
          },
          "execution_count": 254,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.unique(titanic['survived'], return_counts=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8UyZ-7wvJy_D",
        "outputId": "9af0765c-1967-4909-e533-0ae67948e929"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(array(['female', 'male'], dtype=object), array([314, 577]))"
            ]
          },
          "execution_count": 255,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.unique(titanic['sex'], return_counts=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qyg_zJ5aJy_D",
        "outputId": "f6ec6ed9-70b8-4218-9bec-ccfe922488be"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(array(['First', 'Second', 'Third'], dtype=object), array([216, 184, 491]))"
            ]
          },
          "execution_count": 256,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.unique(titanic['class'], return_counts=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "-0ghxWLaJy_D",
        "outputId": "f191c2da-57b5-407d-920e-ee8a2ae6091f"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "_ = sns.displot(titanic['age'], kde=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "5o89M9q1Jy_E",
        "outputId": "71ae28e6-9d00-4912-8719-d0234a0a3359"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>female</th>\n",
              "      <th>male</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     female  male\n",
              "0         0     1\n",
              "1         1     0\n",
              "2         1     0\n",
              "3         1     0\n",
              "4         0     1\n",
              "..      ...   ...\n",
              "886       0     1\n",
              "887       1     0\n",
              "888       1     0\n",
              "889       0     1\n",
              "890       0     1\n",
              "\n",
              "[891 rows x 2 columns]"
            ]
          },
          "execution_count": 258,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "gender = pd.get_dummies(titanic['sex'])\n",
        "gender"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "wEFtmF-fJy_E",
        "outputId": "384afa69-e539-4180-c824-e59bd5bc175c"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>First</th>\n",
              "      <th>Second</th>\n",
              "      <th>Third</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 3 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     First  Second  Third\n",
              "0        0       0      1\n",
              "1        1       0      0\n",
              "2        0       0      1\n",
              "3        1       0      0\n",
              "4        0       0      1\n",
              "..     ...     ...    ...\n",
              "886      0       1      0\n",
              "887      1       0      0\n",
              "888      0       0      1\n",
              "889      1       0      0\n",
              "890      0       0      1\n",
              "\n",
              "[891 rows x 3 columns]"
            ]
          },
          "execution_count": 259,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "clas = pd.get_dummies(titanic['class'])\n",
        "clas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ys7aYr2BJy_E"
      },
      "outputs": [],
      "source": [
        "y = titanic.survived"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "ACwwT2IkJy_E",
        "outputId": "c26fcc07-013b-42d4-d447-0a7d4c216157"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>const</th>\n",
              "      <th>First</th>\n",
              "      <th>Second</th>\n",
              "      <th>female</th>\n",
              "      <th>age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>22.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>38.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>26.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>35.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>35.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>27.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>19.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>26.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>32.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     const  First  Second  female   age\n",
              "0      1.0      0       0       0  22.0\n",
              "1      1.0      1       0       1  38.0\n",
              "2      1.0      0       0       1  26.0\n",
              "3      1.0      1       0       1  35.0\n",
              "4      1.0      0       0       0  35.0\n",
              "..     ...    ...     ...     ...   ...\n",
              "886    1.0      0       1       0  27.0\n",
              "887    1.0      1       0       1  19.0\n",
              "888    1.0      0       0       1   NaN\n",
              "889    1.0      1       0       0  26.0\n",
              "890    1.0      0       0       0  32.0\n",
              "\n",
              "[891 rows x 5 columns]"
            ]
          },
          "execution_count": 261,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "X = pd.concat([clas.First, clas.Second, gender.female, titanic.age], axis=1)\n",
        "X = sm.add_constant(X)\n",
        "X"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5yKDLf6CJy_E"
      },
      "outputs": [],
      "source": [
        "model = sm.Logit(y, X, missing='drop') # some rows contain NaN"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NhjaF4_9Jy_E",
        "outputId": "516e57b1-8d86-492e-9376-6d2966d19817"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Optimization terminated successfully.\n",
            "         Current function value: 0.453279\n",
            "         Iterations 6\n"
          ]
        }
      ],
      "source": [
        "result = model.fit()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 316
        },
        "id": "JFnwNlvCJy_E",
        "outputId": "49a2ad4b-7477-4ff8-adb7-8ec41be7f8f0"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>Logit Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>       <td>survived</td>     <th>  No. Observations:  </th>  <td>   714</td>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                 <td>Logit</td>      <th>  Df Residuals:      </th>  <td>   709</td>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>                 <td>MLE</td>       <th>  Df Model:          </th>  <td>     4</td>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>            <td>Wed, 03 Nov 2021</td> <th>  Pseudo R-squ.:     </th>  <td>0.3289</td>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                <td>19:41:15</td>     <th>  Log-Likelihood:    </th> <td> -323.64</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>converged:</th>             <td>True</td>       <th>  LL-Null:           </th> <td> -482.26</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>  LLR p-value:       </th> <td>2.074e-67</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>const</th>  <td>   -1.3264</td> <td>    0.248</td> <td>   -5.351</td> <td> 0.000</td> <td>   -1.812</td> <td>   -0.841</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>First</th>  <td>    2.5806</td> <td>    0.281</td> <td>    9.169</td> <td> 0.000</td> <td>    2.029</td> <td>    3.132</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Second</th> <td>    1.2708</td> <td>    0.244</td> <td>    5.207</td> <td> 0.000</td> <td>    0.793</td> <td>    1.749</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>female</th> <td>    2.5228</td> <td>    0.207</td> <td>   12.164</td> <td> 0.000</td> <td>    2.116</td> <td>    2.929</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>age</th>    <td>   -0.0370</td> <td>    0.008</td> <td>   -4.831</td> <td> 0.000</td> <td>   -0.052</td> <td>   -0.022</td>\n",
              "</tr>\n",
              "</table>"
            ],
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                           Logit Regression Results                           \n",
              "==============================================================================\n",
              "Dep. Variable:               survived   No. Observations:                  714\n",
              "Model:                          Logit   Df Residuals:                      709\n",
              "Method:                           MLE   Df Model:                            4\n",
              "Date:                Wed, 03 Nov 2021   Pseudo R-squ.:                  0.3289\n",
              "Time:                        19:41:15   Log-Likelihood:                -323.64\n",
              "converged:                       True   LL-Null:                       -482.26\n",
              "Covariance Type:            nonrobust   LLR p-value:                 2.074e-67\n",
              "==============================================================================\n",
              "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
              "------------------------------------------------------------------------------\n",
              "const         -1.3264      0.248     -5.351      0.000      -1.812      -0.841\n",
              "First          2.5806      0.281      9.169      0.000       2.029       3.132\n",
              "Second         1.2708      0.244      5.207      0.000       0.793       1.749\n",
              "female         2.5228      0.207     12.164      0.000       2.116       2.929\n",
              "age           -0.0370      0.008     -4.831      0.000      -0.052      -0.022\n",
              "==============================================================================\n",
              "\"\"\""
            ]
          },
          "execution_count": 264,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "result.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AXRuEbwlJy_F",
        "outputId": "9f224fca-1cd6-4454-ca5a-79ce7fab86db"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "const    -1.326394\n",
              "First     2.580625\n",
              "Second    1.270826\n",
              "female    2.522781\n",
              "age      -0.036985\n",
              "dtype: float64"
            ]
          },
          "execution_count": 265,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "beta = result.params\n",
        "beta"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5Cz9h93HJy_F"
      },
      "source": [
        "As an example, our model suggests a 17-year-old female traveling in first class (such as Rose in the 1997 James Cameron film) had a 95.9% of chance of surviving: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lFp-lcp2Jy_F",
        "outputId": "121e81f6-daf9-4187-e91e-af27eed7c379"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "3.148263137776478"
            ]
          },
          "execution_count": 266,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "linear_out = beta[0] + beta[1]*1 + beta[2]*0 + beta[3]*1 + beta[4]*17\n",
        "linear_out"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t0IjDWDiJy_F",
        "outputId": "b65671c1-0af4-47ef-a1a0-5df8d409755d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.9588402300157425"
            ]
          },
          "execution_count": 267,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "expit(linear_out)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UWAtt2TbJy_G"
      },
      "source": [
        "In contrast, a 20-year-old male traveling in third class had an 11.2% chance of surviving: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Kfas-sUyJy_G"
      },
      "outputs": [],
      "source": [
        "jack = np.array([1, 0, 0, 0, 20])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rp00iFOZJy_G",
        "outputId": "487678a3-37ed-4895-afe9-6e974631f6dd"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "-2.066098896322207"
            ]
          },
          "execution_count": 269,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "linear_out = np.dot(beta, jack)\n",
        "linear_out"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R0JW2apJJy_H",
        "outputId": "da3b1c5e-ff68-4b0e-bef1-301b616b1d2d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.11243575692429553"
            ]
          },
          "execution_count": 270,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "expit(linear_out)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yWmyqE_UJy_H"
      },
      "source": [
        "**Exercises**\n",
        "\n",
        "1. Use the scikit-learn `train_test_split()` method ([documentation here](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html)) to split the titanic data into a training data set (say, two thirds of the data) and a test data set (one third of the data). \n",
        "\n",
        "2. Re-train the OLS model above using your newly-created training data set. Using the test data set, test the model's quality, e.g., with respect to: \n",
        "\n",
        "    * Accuracy (using a standard 50% binary classification threshold) \n",
        "    * Area under the receiving operator characteristic curve (we covered this in [Calculus II](https://github.com/jonkrohn/ML-foundations/blob/master/notebooks/4-calculus-ii.ipynb)).\n",
        "\n",
        "3. Use your own creative whims to add additional features to an OLS model and train it using the training set. How does your new model compare on the test data set metrics relative to the baseline model? And how do they compare to the [Kaggle leaderboard](https://www.kaggle.com/c/titanic/leaderboard)? "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s6NFWUGrJy_H"
      },
      "source": [
        "**Return to slides here.**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZgGbPZ2zJy_H"
      },
      "source": [
        "## Segment 3: Bayesian Statistics"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KMTDDkc7Jy_I"
      },
      "source": [
        "### Bayes' Theorem"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QkUzJX_-Jy_I"
      },
      "source": [
        "...allows us to find $P(\\text{x}|\\text{y})$ when we have $P(\\text{y}|\\text{x})$: \n",
        "$$ P(\\text{x}|\\text{y}) = \\frac{P(\\text{x})P(\\text{y}|\\text{x})}{P(\\text{y})} $$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UaTQn1CxJy_I"
      },
      "source": [
        "Let's use the *xkcd* [exploding sun cartoon](https://xkcd.com/1132/) as an example. Using a standard $\\alpha = .05$ threshold, the frequentist rejected the null hypothesis that the sun hadn't exploded because the probability the neutrino detector outputs `YES` when the sun hasn't exploded is $\\frac{1}{6} \\times \\frac{1}{6} = \\frac{1}{36} \\approx 0.0278$, which is $<.05$."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QscRBfKiJy_I"
      },
      "source": [
        "Using Bayes' theorem, the Bayesian statistician incorporates additional information -- largely related to the probability that the sun has exploded irrespective what the neutrino detector says -- to draw a different conclusion. \n",
        "\n",
        "Let's likewise use some back-of-the-envelope figures to estimate the probability the sun has exploded ($x = \\text{exploded}$) given the neutrino detector output `YES` ($y = \\text{YES}$); that is, $P(x|y)$. To find this, we'll need $P(y|x)$, $P(x)$, and $P(y)$.\n",
        "\n",
        "$P(y = \\text{YES} | x = \\text{exploded}) = \\frac{35}{36} \\approx 0.972 $.\n",
        "\n",
        "$P(x = \\text{exploded})$ can be roughly estimated. It is generous to assume a $\\frac{1}{1000}$ chance because for every thousand days that pass, the sun explodes far less often than once. Further, unless the sun had exploded only in the past few minutes, we'd already be dead. So, the probability that we are alive in an instant where the sun has exploded is extremely small. Anyway, let's go with $\\frac{1}{1000}$ because even with this exceedingly generous figure, we'll demonstrate the point. \n",
        "\n",
        "$P(y = \\text{YES})$: As is often the case, this probability in the Bayes' theorem denominator can be calculated with information we already have because: \n",
        "$$ P(\\text{y}) = \\sum_x P(\\text{y}|x)P(x) $$ \n",
        "Summing over the two possible states of x ($x =$ exploded, $x =$ not exploded): \n",
        "$$ P(y = \\text{YES}) = P(\\text{YES given exploded})P(\\text{exploded}) + P(\\text{YES given not exploded})P(\\text{not exploded}) $$\n",
        "$$ = \\left(\\frac{35}{36}\\right)\\left(\\frac{1}{1000}\\right) + \\left(\\frac{1}{36}\\right)\\left(\\frac{999}{1000}\\right) $$ \n",
        "...which comes out to $P(y = \\text{YES}) \\approx 0.0287$:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k5gMTD5eJy_I",
        "outputId": "cbc0374e-d323-42f1-fd3e-f8cc75b2f194"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.02872222222222222"
            ]
          },
          "execution_count": 271,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "py = (35/36.)*(1/1000.) + (1/36.)*(999/1000.)\n",
        "py"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VVPyAmD2Jy_I"
      },
      "source": [
        "Now we have everything we need to apply Bayes' theorem: "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZF_lXnPXJy_J"
      },
      "outputs": [],
      "source": [
        "py_givenx = 0.972\n",
        "px = .0001"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Q6cjzMN6Jy_J"
      },
      "outputs": [],
      "source": [
        "def bayes(my_px, my_pygivenx, my_py):\n",
        "    return (my_px*my_pygivenx)/my_py"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_mrMcIC2Jy_J",
        "outputId": "9c9b2d2d-8eb3-454a-c45e-0283bab7ba15"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.0033841392649903296"
            ]
          },
          "execution_count": 274,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "bayes(px, py_givenx, py)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "leJ0TyubJy_J"
      },
      "source": [
        "Therefore, even with our generous baseline estimate of a $\\frac{1}{1000}$ chance of the sun having exploded, Bayes' rule enables us to find a 0.3% chance the sun has exploded given the neutrino detector output `YES`. Certainly odds that merit making a $50 bet! "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R00WGeGBJy_J"
      },
      "source": [
        "It would require several hours to describe Bayesian inference beyond Bayes' theorem (e.g., training on a dataset with the `PyMC3` library) so it's beyond our current scope, but for a taste check out [this blog post](https://towardsdatascience.com/estimating-probabilities-with-bayesian-modeling-in-python-7144be007815) and [associated Jupyter notebook](https://github.com/WillKoehrsen/probabilistic-programming/blob/master/Estimating%20Probabilities%20with%20Bayesian%20Inference.ipynb) from Will Koehrsen. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Lj0nvE0tJy_J"
      },
      "source": [
        "**Return to slides here.**"
      ]
    }
  ],
  "metadata": {
    "celltoolbar": "Raw Cell Format",
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.8"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
